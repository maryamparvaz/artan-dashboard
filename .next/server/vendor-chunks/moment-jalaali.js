"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/moment-jalaali";
exports.ids = ["vendor-chunks/moment-jalaali"];
exports.modules = {

/***/ "(ssr)/./node_modules/moment-jalaali/index.js":
/*!**********************************************!*\
  !*** ./node_modules/moment-jalaali/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = jMoment;\nvar moment = __webpack_require__(/*! moment/moment */ \"(ssr)/./node_modules/moment/moment.js\"), jalaali = __webpack_require__(/*! jalaali-js */ \"(ssr)/./node_modules/jalaali-js/index.js\");\n/************************************\n    Constants\n************************************/ var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?|)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS?|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\\d\\d?/, parseTokenOneToThreeDigits = /\\d{1,3}/, parseTokenThreeDigits = /\\d{3}/, parseTokenFourDigits = /\\d{1,4}/, parseTokenSixDigits = /[+\\-]?\\d{1,6}/, parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, parseTokenT = /T/i, parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, symbolMap = {\n    \"1\": \"۱\",\n    \"2\": \"۲\",\n    \"3\": \"۳\",\n    \"4\": \"۴\",\n    \"5\": \"۵\",\n    \"6\": \"۶\",\n    \"7\": \"۷\",\n    \"8\": \"۸\",\n    \"9\": \"۹\",\n    \"0\": \"۰\"\n}, numberMap = {\n    \"۱\": \"1\",\n    \"۲\": \"2\",\n    \"۳\": \"3\",\n    \"۴\": \"4\",\n    \"۵\": \"5\",\n    \"۶\": \"6\",\n    \"۷\": \"7\",\n    \"۸\": \"8\",\n    \"۹\": \"9\",\n    \"۰\": \"0\"\n}, unitAliases = {\n    jm: \"jmonth\",\n    jmonths: \"jmonth\",\n    jy: \"jyear\",\n    jyears: \"jyear\"\n}, formatFunctions = {}, ordinalizeTokens = \"DDD w M D\".split(\" \"), paddedTokens = \"M D w\".split(\" \"), formatTokenFunctions = {\n    jM: function() {\n        return this.jMonth() + 1;\n    },\n    jMMM: function(format) {\n        return this.localeData().jMonthsShort(this, format);\n    },\n    jMMMM: function(format) {\n        return this.localeData().jMonths(this, format);\n    },\n    jD: function() {\n        return this.jDate();\n    },\n    jDDD: function() {\n        return this.jDayOfYear();\n    },\n    jw: function() {\n        return this.jWeek();\n    },\n    jYY: function() {\n        return leftZeroFill(this.jYear() % 100, 2);\n    },\n    jYYYY: function() {\n        return leftZeroFill(this.jYear(), 4);\n    },\n    jYYYYY: function() {\n        return leftZeroFill(this.jYear(), 5);\n    },\n    jgg: function() {\n        return leftZeroFill(this.jWeekYear() % 100, 2);\n    },\n    jgggg: function() {\n        return this.jWeekYear();\n    },\n    jggggg: function() {\n        return leftZeroFill(this.jWeekYear(), 5);\n    }\n};\nfunction padToken(func, count) {\n    return function(a) {\n        return leftZeroFill(func.call(this, a), count);\n    };\n}\nfunction ordinalizeToken(func, period) {\n    return function(a) {\n        return this.localeData().ordinal(func.call(this, a), period);\n    };\n}\n(function() {\n    var i;\n    while(ordinalizeTokens.length){\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[\"j\" + i + \"o\"] = ordinalizeToken(formatTokenFunctions[\"j\" + i], i);\n    }\n    while(paddedTokens.length){\n        i = paddedTokens.pop();\n        formatTokenFunctions[\"j\" + i + i] = padToken(formatTokenFunctions[\"j\" + i], 2);\n    }\n    formatTokenFunctions.jDDDD = padToken(formatTokenFunctions.jDDD, 3);\n})();\n/************************************\n    Helpers\n************************************/ function extend(a, b) {\n    var key;\n    for(key in b)if (b.hasOwnProperty(key)) a[key] = b[key];\n    return a;\n}\nfunction leftZeroFill(number, targetLength) {\n    var output = number + \"\";\n    while(output.length < targetLength)output = \"0\" + output;\n    return output;\n}\nfunction isArray(input) {\n    return Object.prototype.toString.call(input) === \"[object Array]\";\n}\n// function compareArrays(array1, array2) {\n//   var len = Math.min(array1.length, array2.length)\n//     , lengthDiff = Math.abs(array1.length - array2.length)\n//     , diffs = 0\n//     , i\n//   for (i = 0; i < len; i += 1)\n//     if (~~array1[i] !== ~~array2[i])\n//       diffs += 1\n//   return diffs + lengthDiff\n// }\nfunction normalizeUnits(units) {\n    if (units) {\n        var lowered = units.toLowerCase();\n        units = unitAliases[lowered] || lowered;\n    }\n    return units;\n}\nfunction setDate(m, year, month, date) {\n    var d = m._d;\n    if (isNaN(year)) {\n        m._isValid = false;\n    }\n    if (m._isUTC) {\n        /*eslint-disable new-cap*/ m._d = new Date(Date.UTC(year, month, date, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()));\n    /*eslint-enable new-cap*/ } else {\n        m._d = new Date(year, month, date, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n    }\n}\nfunction objectCreate(parent) {\n    function F() {}\n    F.prototype = parent;\n    return new F();\n}\nfunction getPrototypeOf(object) {\n    if (Object.getPrototypeOf) return Object.getPrototypeOf(object);\n    else if (\"\".__proto__) return object.__proto__;\n    else return object.constructor.prototype;\n}\n/************************************\n    Languages\n************************************/ extend(getPrototypeOf(moment.localeData()), {\n    _jMonths: [\n        \"Farvardin\",\n        \"Ordibehesht\",\n        \"Khordaad\",\n        \"Tir\",\n        \"Amordaad\",\n        \"Shahrivar\",\n        \"Mehr\",\n        \"Aabaan\",\n        \"Aazar\",\n        \"Dey\",\n        \"Bahman\",\n        \"Esfand\"\n    ],\n    jMonths: function(m) {\n        return this._jMonths[m.jMonth()];\n    },\n    _jMonthsShort: [\n        \"Far\",\n        \"Ord\",\n        \"Kho\",\n        \"Tir\",\n        \"Amo\",\n        \"Sha\",\n        \"Meh\",\n        \"Aab\",\n        \"Aaz\",\n        \"Dey\",\n        \"Bah\",\n        \"Esf\"\n    ],\n    jMonthsShort: function(m) {\n        return this._jMonthsShort[m.jMonth()];\n    },\n    jMonthsParse: function(monthName) {\n        var i, mom, regex;\n        if (!this._jMonthsParse) this._jMonthsParse = [];\n        for(i = 0; i < 12; i += 1){\n            // Make the regex if we don't have it already.\n            if (!this._jMonthsParse[i]) {\n                mom = jMoment([\n                    2000,\n                    (2 + i) % 12,\n                    25\n                ]);\n                regex = \"^\" + this.jMonths(mom, \"\") + \"|^\" + this.jMonthsShort(mom, \"\");\n                this._jMonthsParse[i] = new RegExp(regex.replace(\".\", \"\"), \"i\");\n            }\n            // Test the regex.\n            if (this._jMonthsParse[i].test(monthName)) return i;\n        }\n    }\n});\n/************************************\n    Formatting\n************************************/ function makeFormatFunction(format) {\n    var array = format.match(formattingTokens), length = array.length, i;\n    for(i = 0; i < length; i += 1)if (formatTokenFunctions[array[i]]) array[i] = formatTokenFunctions[array[i]];\n    return function(mom) {\n        var output = \"\";\n        for(i = 0; i < length; i += 1)output += array[i] instanceof Function ? \"[\" + array[i].call(mom, format) + \"]\" : array[i];\n        return output;\n    };\n}\n/************************************\n    Parsing\n************************************/ function getParseRegexForToken(token, config) {\n    switch(token){\n        case \"jDDDD\":\n            return parseTokenThreeDigits;\n        case \"jYYYY\":\n            return parseTokenFourDigits;\n        case \"jYYYYY\":\n            return parseTokenSixDigits;\n        case \"jDDD\":\n            return parseTokenOneToThreeDigits;\n        case \"jMMM\":\n        case \"jMMMM\":\n            return parseTokenWord;\n        case \"jMM\":\n        case \"jDD\":\n        case \"jYY\":\n        case \"jM\":\n        case \"jD\":\n            return parseTokenOneOrTwoDigits;\n        case \"DDDD\":\n            return parseTokenThreeDigits;\n        case \"YYYY\":\n            return parseTokenFourDigits;\n        case \"YYYYY\":\n            return parseTokenSixDigits;\n        case \"S\":\n        case \"SS\":\n        case \"SSS\":\n        case \"DDD\":\n            return parseTokenOneToThreeDigits;\n        case \"MMM\":\n        case \"MMMM\":\n        case \"dd\":\n        case \"ddd\":\n        case \"dddd\":\n            return parseTokenWord;\n        case \"a\":\n        case \"A\":\n            return moment.localeData(config._l)._meridiemParse;\n        case \"X\":\n            return parseTokenTimestampMs;\n        case \"Z\":\n        case \"ZZ\":\n            return parseTokenTimezone;\n        case \"T\":\n            return parseTokenT;\n        case \"MM\":\n        case \"DD\":\n        case \"YY\":\n        case \"HH\":\n        case \"hh\":\n        case \"mm\":\n        case \"ss\":\n        case \"M\":\n        case \"D\":\n        case \"d\":\n        case \"H\":\n        case \"h\":\n        case \"m\":\n        case \"s\":\n            return parseTokenOneOrTwoDigits;\n        default:\n            return new RegExp(token.replace(\"\\\\\", \"\"));\n    }\n}\nfunction addTimeToArrayFromToken(token, input, config) {\n    var a, datePartArray = config._a;\n    switch(token){\n        case \"jM\":\n        case \"jMM\":\n            datePartArray[1] = input == null ? 0 : ~~input - 1;\n            break;\n        case \"jMMM\":\n        case \"jMMMM\":\n            a = moment.localeData(config._l).jMonthsParse(input);\n            if (a != null) datePartArray[1] = a;\n            else config._isValid = false;\n            break;\n        case \"jD\":\n        case \"jDD\":\n        case \"jDDD\":\n        case \"jDDDD\":\n            if (input != null) datePartArray[2] = ~~input;\n            break;\n        case \"jYY\":\n            datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);\n            break;\n        case \"jYYYY\":\n        case \"jYYYYY\":\n            datePartArray[0] = ~~input;\n    }\n    if (input == null) config._isValid = false;\n}\nfunction dateFromArray(config) {\n    var g, j, jy = config._a[0], jm = config._a[1], jd = config._a[2];\n    if (jy == null && jm == null && jd == null) return [\n        0,\n        0,\n        1\n    ];\n    jy = jy != null ? jy : 0;\n    jm = jm != null ? jm : 0;\n    jd = jd != null ? jd : 1;\n    if (jd < 1 || jd > jMoment.jDaysInMonth(jy, jm) || jm < 0 || jm > 11) config._isValid = false;\n    g = toGregorian(jy, jm, jd);\n    j = toJalaali(g.gy, g.gm, g.gd);\n    if (isNaN(g.gy)) config._isValid = false;\n    config._jDiff = 0;\n    if (~~j.jy !== jy) config._jDiff += 1;\n    if (~~j.jm !== jm) config._jDiff += 1;\n    if (~~j.jd !== jd) config._jDiff += 1;\n    return [\n        g.gy,\n        g.gm,\n        g.gd\n    ];\n}\nfunction makeDateFromStringAndFormat(config) {\n    var tokens = config._f.match(formattingTokens), string = config._i + \"\", len = tokens.length, i, token, parsedInput;\n    config._a = [];\n    for(i = 0; i < len; i += 1){\n        token = tokens[i];\n        parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n        if (parsedInput) string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n        if (formatTokenFunctions[token]) addTimeToArrayFromToken(token, parsedInput, config);\n    }\n    if (string) config._il = string;\n    return dateFromArray(config);\n}\nfunction makeDateFromStringAndArray(config, utc) {\n    var len = config._f.length, i, format, tempMoment, bestMoment, currentScore, scoreToBeat;\n    if (len === 0) {\n        return makeMoment(new Date(NaN));\n    }\n    for(i = 0; i < len; i += 1){\n        format = config._f[i];\n        currentScore = 0;\n        tempMoment = makeMoment(config._i, format, config._l, config._strict, utc);\n        if (!tempMoment.isValid()) continue;\n        // currentScore = compareArrays(tempMoment._a, tempMoment.toArray())\n        currentScore += tempMoment._jDiff;\n        if (tempMoment._il) currentScore += tempMoment._il.length;\n        if (scoreToBeat == null || currentScore < scoreToBeat) {\n            scoreToBeat = currentScore;\n            bestMoment = tempMoment;\n        }\n    }\n    return bestMoment;\n}\nfunction removeParsedTokens(config) {\n    var string = config._i + \"\", input = \"\", format = \"\", array = config._f.match(formattingTokens), len = array.length, i, match, parsed;\n    for(i = 0; i < len; i += 1){\n        match = array[i];\n        parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];\n        if (parsed) string = string.slice(string.indexOf(parsed) + parsed.length);\n        if (!(formatTokenFunctions[match] instanceof Function)) {\n            format += match;\n            if (parsed) input += parsed;\n        }\n    }\n    config._i = input;\n    config._f = format;\n}\n/************************************\n    Week of Year\n************************************/ function jWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n    var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;\n    if (daysToDayOfWeek > end) {\n        daysToDayOfWeek -= 7;\n    }\n    if (daysToDayOfWeek < end - 7) {\n        daysToDayOfWeek += 7;\n    }\n    adjustedMoment = jMoment(mom).add(daysToDayOfWeek, \"d\");\n    return {\n        week: Math.ceil(adjustedMoment.jDayOfYear() / 7),\n        year: adjustedMoment.jYear()\n    };\n}\n/************************************\n    Top Level Functions\n************************************/ var maxTimestamp = 57724432199999;\nfunction makeMoment(input, format, lang, strict, utc) {\n    if (typeof lang === \"boolean\") {\n        strict = lang;\n        lang = undefined;\n    }\n    if (format && typeof format === \"string\") format = fixFormat(format, moment);\n    var config = {\n        _i: input,\n        _f: format,\n        _l: lang,\n        _strict: strict,\n        _isUTC: utc\n    }, date, m, jm, origInput = input, origFormat = format;\n    if (format) {\n        if (isArray(format)) {\n            return makeDateFromStringAndArray(config, utc);\n        } else {\n            date = makeDateFromStringAndFormat(config);\n            removeParsedTokens(config);\n            format = \"YYYY-MM-DD-\" + config._f;\n            input = leftZeroFill(date[0], 4) + \"-\" + leftZeroFill(date[1] + 1, 2) + \"-\" + leftZeroFill(date[2], 2) + \"-\" + config._i;\n        }\n    }\n    if (utc) m = moment.utc(input, format, lang, strict);\n    else m = moment(input, format, lang, strict);\n    if (config._isValid === false) m._isValid = false;\n    m._jDiff = config._jDiff || 0;\n    jm = objectCreate(jMoment.fn);\n    extend(jm, m);\n    if (strict && format && jm.isValid()) {\n        jm._isValid = jm.format(origFormat) === origInput;\n    }\n    if (m._d.getTime() > maxTimestamp) {\n        jm._isValid = false;\n    }\n    return jm;\n}\nfunction jMoment(input, format, lang, strict) {\n    return makeMoment(input, format, lang, strict, false);\n}\nextend(jMoment, moment);\njMoment.fn = objectCreate(moment.fn);\njMoment.utc = function(input, format, lang, strict) {\n    return makeMoment(input, format, lang, strict, true);\n};\njMoment.unix = function(input) {\n    return makeMoment(input * 1000);\n};\n/************************************\n    jMoment Prototype\n************************************/ function fixFormat(format, _moment) {\n    var i = 5;\n    var replace = function(input) {\n        return _moment.localeData().longDateFormat(input) || input;\n    };\n    while(i > 0 && localFormattingTokens.test(format)){\n        i -= 1;\n        format = format.replace(localFormattingTokens, replace);\n    }\n    return format;\n}\njMoment.fn.format = function(format) {\n    if (format) {\n        format = fixFormat(format, this);\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n        format = formatFunctions[format](this);\n    }\n    return moment.fn.format.call(this, format);\n};\njMoment.fn.jYear = function(input) {\n    var lastDay, j, g;\n    if (typeof input === \"number\") {\n        j = toJalaali(this.year(), this.month(), this.date());\n        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(input, j.jm));\n        g = toGregorian(input, j.jm, lastDay);\n        setDate(this, g.gy, g.gm, g.gd);\n        moment.updateOffset(this);\n        return this;\n    } else {\n        return toJalaali(this.year(), this.month(), this.date()).jy;\n    }\n};\njMoment.fn.jMonth = function(input) {\n    var lastDay, j, g;\n    if (input != null) {\n        if (typeof input === \"string\") {\n            input = this.localeData().jMonthsParse(input);\n            if (typeof input !== \"number\") return this;\n        }\n        j = toJalaali(this.year(), this.month(), this.date());\n        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(j.jy, input));\n        this.jYear(j.jy + div(input, 12));\n        input = mod(input, 12);\n        if (input < 0) {\n            input += 12;\n            this.jYear(this.jYear() - 1);\n        }\n        g = toGregorian(this.jYear(), input, lastDay);\n        setDate(this, g.gy, g.gm, g.gd);\n        moment.updateOffset(this);\n        return this;\n    } else {\n        return toJalaali(this.year(), this.month(), this.date()).jm;\n    }\n};\njMoment.fn.jDate = function(input) {\n    var j, g;\n    if (typeof input === \"number\") {\n        j = toJalaali(this.year(), this.month(), this.date());\n        g = toGregorian(j.jy, j.jm, input);\n        setDate(this, g.gy, g.gm, g.gd);\n        moment.updateOffset(this);\n        return this;\n    } else {\n        return toJalaali(this.year(), this.month(), this.date()).jd;\n    }\n};\njMoment.fn.jDayOfYear = function(input) {\n    var dayOfYear = Math.round((jMoment(this).startOf(\"day\") - jMoment(this).startOf(\"jYear\")) / 864e5) + 1;\n    return input == null ? dayOfYear : this.add(input - dayOfYear, \"d\");\n};\njMoment.fn.jWeek = function(input) {\n    var week = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;\n    return input == null ? week : this.add((input - week) * 7, \"d\");\n};\njMoment.fn.jWeekYear = function(input) {\n    var year = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;\n    return input == null ? year : this.add(input - year, \"y\");\n};\njMoment.fn.add = function(val, units) {\n    var temp;\n    if (units !== null && !isNaN(+units)) {\n        temp = val;\n        val = units;\n        units = temp;\n    }\n    units = normalizeUnits(units);\n    if (units === \"jyear\") {\n        this.jYear(this.jYear() + val);\n    } else if (units === \"jmonth\") {\n        this.jMonth(this.jMonth() + val);\n    } else {\n        moment.fn.add.call(this, val, units);\n        if (isNaN(this.jYear())) {\n            this._isValid = false;\n        }\n    }\n    return this;\n};\njMoment.fn.subtract = function(val, units) {\n    var temp;\n    if (units !== null && !isNaN(+units)) {\n        temp = val;\n        val = units;\n        units = temp;\n    }\n    units = normalizeUnits(units);\n    if (units === \"jyear\") {\n        this.jYear(this.jYear() - val);\n    } else if (units === \"jmonth\") {\n        this.jMonth(this.jMonth() - val);\n    } else {\n        moment.fn.subtract.call(this, val, units);\n    }\n    return this;\n};\njMoment.fn.startOf = function(units) {\n    units = normalizeUnits(units);\n    if (units === \"jyear\" || units === \"jmonth\") {\n        if (units === \"jyear\") {\n            this.jMonth(0);\n        }\n        this.jDate(1);\n        this.hours(0);\n        this.minutes(0);\n        this.seconds(0);\n        this.milliseconds(0);\n        return this;\n    } else {\n        return moment.fn.startOf.call(this, units);\n    }\n};\njMoment.fn.endOf = function(units) {\n    units = normalizeUnits(units);\n    if (units === undefined || units === \"milisecond\") {\n        return this;\n    }\n    return this.startOf(units).add(1, units === \"isoweek\" ? \"week\" : units).subtract(1, \"ms\");\n};\njMoment.fn.isSame = function(other, units) {\n    units = normalizeUnits(units);\n    if (units === \"jyear\" || units === \"jmonth\") {\n        return moment.fn.isSame.call(this.startOf(units), other.startOf(units));\n    }\n    return moment.fn.isSame.call(this, other, units);\n};\njMoment.fn.clone = function() {\n    return jMoment(this);\n};\njMoment.fn.jYears = jMoment.fn.jYear;\njMoment.fn.jMonths = jMoment.fn.jMonth;\njMoment.fn.jDates = jMoment.fn.jDate;\njMoment.fn.jWeeks = jMoment.fn.jWeek;\n/************************************\n    jMoment Statics\n************************************/ jMoment.jDaysInMonth = function(year, month) {\n    year += div(month, 12);\n    month = mod(month, 12);\n    if (month < 0) {\n        month += 12;\n        year -= 1;\n    }\n    if (month < 6) {\n        return 31;\n    } else if (month < 11) {\n        return 30;\n    } else if (jMoment.jIsLeapYear(year)) {\n        return 30;\n    } else {\n        return 29;\n    }\n};\njMoment.jIsLeapYear = jalaali.isLeapJalaaliYear;\njMoment.loadPersian = function(args) {\n    var usePersianDigits = args !== undefined && args.hasOwnProperty(\"usePersianDigits\") ? args.usePersianDigits : false;\n    var dialect = args !== undefined && args.hasOwnProperty(\"dialect\") ? args.dialect : \"persian\";\n    moment.locale(\"fa\");\n    moment.updateLocale(\"fa\", {\n        months: \"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),\n        monthsShort: \"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),\n        weekdays: {\n            \"persian\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه\".split(\"_\"),\n            \"persian-modern\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\")\n        }[dialect],\n        weekdaysShort: {\n            \"persian\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه\".split(\"_\"),\n            \"persian-modern\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\")\n        }[dialect],\n        weekdaysMin: {\n            \"persian\": \"ی_د_س_چ_پ_آ_ش\".split(\"_\"),\n            \"persian-modern\": \"ی_د_س_چ_پ_ج_ش\".split(\"_\")\n        }[dialect],\n        longDateFormat: {\n            LT: \"HH:mm\",\n            L: \"jYYYY/jMM/jDD\",\n            LL: \"jD jMMMM jYYYY\",\n            LLL: \"jD jMMMM jYYYY LT\",\n            LLLL: \"dddd، jD jMMMM jYYYY LT\"\n        },\n        calendar: {\n            sameDay: \"[امروز ساعت] LT\",\n            nextDay: \"[فردا ساعت] LT\",\n            nextWeek: \"dddd [ساعت] LT\",\n            lastDay: \"[دیروز ساعت] LT\",\n            lastWeek: \"dddd [ی پیش ساعت] LT\",\n            sameElse: \"L\"\n        },\n        relativeTime: {\n            future: \"در %s\",\n            past: \"%s پیش\",\n            s: \"چند ثانیه\",\n            m: \"1 دقیقه\",\n            mm: \"%d دقیقه\",\n            h: \"1 ساعت\",\n            hh: \"%d ساعت\",\n            d: \"1 روز\",\n            dd: \"%d روز\",\n            M: \"1 ماه\",\n            MM: \"%d ماه\",\n            y: \"1 سال\",\n            yy: \"%d سال\"\n        },\n        preparse: function(string) {\n            if (usePersianDigits) {\n                return string.replace(/[۰-۹]/g, function(match) {\n                    return numberMap[match];\n                }).replace(/،/g, \",\");\n            }\n            return string;\n        },\n        postformat: function(string) {\n            if (usePersianDigits) {\n                return string.replace(/\\d/g, function(match) {\n                    return symbolMap[match];\n                }).replace(/,/g, \"،\");\n            }\n            return string;\n        },\n        ordinal: \"%dم\",\n        week: {\n            dow: 6 // Saturday is the first day of the week.\n            ,\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n        },\n        meridiem: function(hour) {\n            return hour < 12 ? \"ق.ظ\" : \"ب.ظ\";\n        },\n        jMonths: {\n            \"persian\": \"فروردین_اردیبهشت_خرداد_تیر_امرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند\".split(\"_\"),\n            \"persian-modern\": \"فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند\".split(\"_\")\n        }[dialect],\n        jMonthsShort: {\n            \"persian\": \"فرو_ارد_خرد_تیر_امر_شهر_مهر_آبا_آذر_دی_بهم_اسف\".split(\"_\"),\n            \"persian-modern\": \"فرو_ارد_خرد_تیر_مرد_شهر_مهر_آبا_آذر_دی_بهم_اسف\".split(\"_\")\n        }[dialect]\n    });\n};\njMoment.loadPersian_dari = function(args) {\n    var usePersianDigits = args !== undefined && args.hasOwnProperty(\"usePersianDigits\") ? args.usePersianDigits : false;\n    var dialect = args !== undefined && args.hasOwnProperty(\"dialect\") ? args.dialect : \"persian-dari\";\n    moment.locale(\"fa-af\");\n    moment.updateLocale(\"fa-af\", {\n        months: \"جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر\".split(\"_\"),\n        monthsShort: \"جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر\".split(\"_\"),\n        weekdays: {\n            \"persian\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه\".split(\"_\"),\n            \"persian-modern\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\")\n        }[dialect],\n        weekdaysShort: {\n            \"persian\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه\".split(\"_\"),\n            \"persian-modern\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\")\n        }[dialect],\n        weekdaysMin: {\n            \"persian\": \"ی_د_س_چ_پ_آ_ش\".split(\"_\"),\n            \"persian-modern\": \"ی_د_س_چ_پ_ج_ش\".split(\"_\")\n        }[dialect],\n        longDateFormat: {\n            LT: \"HH:mm\",\n            L: \"jYYYY/jMM/jDD\",\n            LL: \"jD jMMMM jYYYY\",\n            LLL: \"jD jMMMM jYYYY LT\",\n            LLLL: \"dddd، jD jMMMM jYYYY LT\"\n        },\n        calendar: {\n            sameDay: \"[امروز ساعت] LT\",\n            nextDay: \"[فردا ساعت] LT\",\n            nextWeek: \"dddd [ساعت] LT\",\n            lastDay: \"[دیروز ساعت] LT\",\n            lastWeek: \"dddd [ی پیش ساعت] LT\",\n            sameElse: \"L\"\n        },\n        relativeTime: {\n            future: \"در %s\",\n            past: \"%s پیش\",\n            s: \"چند ثانیه\",\n            m: \"1 دقیقه\",\n            mm: \"%d دقیقه\",\n            h: \"1 ساعت\",\n            hh: \"%d ساعت\",\n            d: \"1 روز\",\n            dd: \"%d روز\",\n            M: \"1 ماه\",\n            MM: \"%d ماه\",\n            y: \"1 سال\",\n            yy: \"%d سال\"\n        },\n        preparse: function(string) {\n            if (usePersianDigits) {\n                return string.replace(/[۰-۹]/g, function(match) {\n                    return numberMap[match];\n                }).replace(/،/g, \",\");\n            }\n            return string;\n        },\n        postformat: function(string) {\n            if (usePersianDigits) {\n                return string.replace(/\\d/g, function(match) {\n                    return symbolMap[match];\n                }).replace(/,/g, \"،\");\n            }\n            return string;\n        },\n        ordinal: \"%dم\",\n        week: {\n            dow: 6 // Saturday is the first day of the week.\n            ,\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n        },\n        meridiem: function(hour) {\n            return hour < 12 ? \"ق.ظ\" : \"ب.ظ\";\n        },\n        jMonths: {\n            \"persian-dari\": \"حمل_ثور_جوزا_سرطان_اسد_سنبله_میزان_عقرب_قوس_جدی_دلو_حوت\".split(\"_\"),\n            \"persian-modern-dari\": \"حمل_ثور_جوزا_سرطان_اسد_سنبله_میزان_عقرب_قوس_جدی_دلو_حوت\".split(\"_\")\n        }[dialect],\n        jMonthsShort: {\n            \"persian-dari\": \"حمل_ثور_جوزا_سرط_اسد_سنب_میز_عقر_قوس_جدی_دلو_حوت\".split(\"_\"),\n            \"persian-modern-dari\": \"حمل_ثور_جوزا_سرط_اسد_سنب_میز_عقر_قوس_جدی_دلو_حوت\".split(\"_\")\n        }[dialect]\n    });\n};\njMoment.loadPashto = function(args) {\n    var usePersianDigits = args !== undefined && args.hasOwnProperty(\"usePersianDigits\") ? args.usePersianDigits : false;\n    var dialect = args !== undefined && args.hasOwnProperty(\"dialect\") ? args.dialect : \"pashto\";\n    moment.locale(\"ps-af\");\n    moment.updateLocale(\"ps-af\", {\n        months: \"جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر\".split(\"_\"),\n        monthsShort: \"جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر\".split(\"_\"),\n        weekdays: {\n            \"pashto\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه\".split(\"_\"),\n            \"pashto-modern\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\")\n        }[dialect],\n        weekdaysShort: {\n            \"pashto\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه\".split(\"_\"),\n            \"pashto-modern\": \"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\")\n        }[dialect],\n        weekdaysMin: {\n            \"pashto\": \"ی_د_س_چ_پ_آ_ش\".split(\"_\"),\n            \"pashto-modern\": \"ی_د_س_چ_پ_ج_ش\".split(\"_\")\n        }[dialect],\n        longDateFormat: {\n            LT: \"HH:mm\",\n            L: \"jYYYY/jMM/jDD\",\n            LL: \"jD jMMMM jYYYY\",\n            LLL: \"jD jMMMM jYYYY LT\",\n            LLLL: \"dddd، jD jMMMM jYYYY LT\"\n        },\n        calendar: {\n            sameDay: \"[امروز ساعت] LT\",\n            nextDay: \"[فردا ساعت] LT\",\n            nextWeek: \"dddd [ساعت] LT\",\n            lastDay: \"[دیروز ساعت] LT\",\n            lastWeek: \"dddd [ی پیش ساعت] LT\",\n            sameElse: \"L\"\n        },\n        relativeTime: {\n            future: \"در %s\",\n            past: \"%s پیش\",\n            s: \"چند ثانیه\",\n            m: \"1 دقیقه\",\n            mm: \"%d دقیقه\",\n            h: \"1 ساعت\",\n            hh: \"%d ساعت\",\n            d: \"1 روز\",\n            dd: \"%d روز\",\n            M: \"1 ماه\",\n            MM: \"%d ماه\",\n            y: \"1 سال\",\n            yy: \"%d سال\"\n        },\n        preparse: function(string) {\n            if (usePersianDigits) {\n                return string.replace(/[۰-۹]/g, function(match) {\n                    return numberMap[match];\n                }).replace(/،/g, \",\");\n            }\n            return string;\n        },\n        postformat: function(string) {\n            if (usePersianDigits) {\n                return string.replace(/\\d/g, function(match) {\n                    return symbolMap[match];\n                }).replace(/,/g, \"،\");\n            }\n            return string;\n        },\n        ordinal: \"%dم\",\n        week: {\n            dow: 6 // Saturday is the first day of the week.\n            ,\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n        },\n        meridiem: function(hour) {\n            return hour < 12 ? \"ق.ظ\" : \"ب.ظ\";\n        },\n        jMonths: {\n            \"pashto\": \"وری_غویی_غبرګولی_چنګاښ_زمری_وږی_تله_لړم_لیندی_مرغومی_سلواغه_کب\".split(\"_\"),\n            \"pashto-modern\": \"وری_غویی_غبرګولی_چنګاښ_زمری_وږی_تله_لړم_لیندی_مرغومی_سلواغه_کب\".split(\"_\")\n        }[dialect],\n        jMonthsShort: {\n            \"pashto\": \"وری_غوی_غبر_چنګ_زمر_وږی_لړم_لین_مرغ_سلو_کب\".split(\"_\"),\n            \"pashto-modern\": \"وری_غوی_غبر_چنګ_زمر_وږی_لړم_لین_مرغ_سلو_کب\".split(\"_\")\n        }[dialect]\n    });\n};\njMoment.jConvert = {\n    toJalaali: toJalaali,\n    toGregorian: toGregorian\n};\n/************************************\n    Jalaali Conversion\n************************************/ function toJalaali(gy, gm, gd) {\n    try {\n        var j = jalaali.toJalaali(gy, gm + 1, gd);\n        j.jm -= 1;\n        return j;\n    } catch (e) {\n        return {\n            jy: NaN,\n            jm: NaN,\n            jd: NaN\n        };\n    }\n}\nfunction toGregorian(jy, jm, jd) {\n    try {\n        var g = jalaali.toGregorian(jy, jm + 1, jd);\n        g.gm -= 1;\n        return g;\n    } catch (e) {\n        return {\n            gy: NaN,\n            gm: NaN,\n            gd: NaN\n        };\n    }\n}\n/*\n  Utility helper functions.\n*/ function div(a, b) {\n    return ~~(a / b);\n}\nfunction mod(a, b) {\n    return a - ~~(a / b) * b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9tZW50LWphbGFhbGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDLCtEQUNqQkMsVUFBVUQsbUJBQU9BLENBQUM7QUFFdEI7O21DQUVtQyxHQUVuQyxJQUFJRSxtQkFBbUIsOE5BQ25CQyx3QkFBd0IsNENBRXhCQywyQkFBMkIsU0FDM0JDLDZCQUE2QixXQUM3QkMsd0JBQXdCLFNBQ3hCQyx1QkFBdUIsV0FDdkJDLHNCQUFzQixpQkFDdEJDLGlCQUFpQixvSEFDakJDLHFCQUFxQix1QkFDckJDLGNBQWMsTUFDZEMsd0JBQXdCLDBCQUN4QkMsWUFBWTtJQUNaLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7QUFDUCxHQUNFQyxZQUFZO0lBQ1osS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztBQUNQLEdBR0VDLGNBQ0E7SUFBRUMsSUFBSTtJQUNKQyxTQUFTO0lBQ1RDLElBQUk7SUFDSkMsUUFBUTtBQUNWLEdBRUFDLGtCQUFrQixDQUFDLEdBRW5CQyxtQkFBbUIsWUFBWUMsS0FBSyxDQUFDLE1BQ3JDQyxlQUFlLFFBQVFELEtBQUssQ0FBQyxNQUU3QkUsdUJBQ0E7SUFBRUMsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDQyxNQUFNLEtBQUs7SUFDekI7SUFDQUMsTUFBTSxTQUFVQyxNQUFNO1FBQ3BCLE9BQU8sSUFBSSxDQUFDQyxVQUFVLEdBQUdDLFlBQVksQ0FBQyxJQUFJLEVBQUVGO0lBQzlDO0lBQ0FHLE9BQU8sU0FBVUgsTUFBTTtRQUNyQixPQUFPLElBQUksQ0FBQ0MsVUFBVSxHQUFH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ZixPQUFPLENBQUMsQ0FBRVYsQ0FBQUEsSUFBSVUsQ0FBQUE7QUFDaEI7QUFFQSxTQUFTNkgsSUFBSXZJLENBQUMsRUFBRVUsQ0FBQztJQUNmLE9BQU9WLElBQUksQ0FBQyxDQUFFQSxDQUFBQSxJQUFJVSxDQUFBQSxJQUFLQTtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRlbnQtY29tcGFzcy1yZXBvcnRzLy4vbm9kZV9tb2R1bGVzL21vbWVudC1qYWxhYWxpL2luZGV4LmpzPzBhOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGpNb21lbnRcblxudmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudC9tb21lbnQnKVxuICAsIGphbGFhbGkgPSByZXF1aXJlKCdqYWxhYWxpLWpzJylcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIENvbnN0YW50c1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpP2ooTW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98d1tvfHddP3xZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3wpfChcXFxcKT8oTW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xtbT98c3M/fFNTP1M/fFh8eno/fFpaP3wuKS9nXG4gICwgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUUz98TEw/TD9MP3xsezEsNH0pL2dcblxuICAsIHBhcnNlVG9rZW5PbmVPclR3b0RpZ2l0cyA9IC9cXGRcXGQ/L1xuICAsIHBhcnNlVG9rZW5PbmVUb1RocmVlRGlnaXRzID0gL1xcZHsxLDN9L1xuICAsIHBhcnNlVG9rZW5UaHJlZURpZ2l0cyA9IC9cXGR7M30vXG4gICwgcGFyc2VUb2tlbkZvdXJEaWdpdHMgPSAvXFxkezEsNH0vXG4gICwgcGFyc2VUb2tlblNpeERpZ2l0cyA9IC9bK1xcLV0/XFxkezEsNn0vXG4gICwgcGFyc2VUb2tlbldvcmQgPSAvWzAtOV0qWydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdK3xbXFx1MDYwMC1cXHUwNkZGXFwvXSsoXFxzKj9bXFx1MDYwMC1cXHUwNkZGXSspezEsMn0vaVxuICAsIHBhcnNlVG9rZW5UaW1lem9uZSA9IC9afFtcXCtcXC1dXFxkXFxkOj9cXGRcXGQvaVxuICAsIHBhcnNlVG9rZW5UID0gL1QvaVxuICAsIHBhcnNlVG9rZW5UaW1lc3RhbXBNcyA9IC9bXFwrXFwtXT9cXGQrKFxcLlxcZHsxLDN9KT8vXG4gICwgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ9uxJyxcbiAgICAnMic6ICfbsicsXG4gICAgJzMnOiAn27MnLFxuICAgICc0JzogJ9u0JyxcbiAgICAnNSc6ICfbtScsXG4gICAgJzYnOiAn27YnLFxuICAgICc3JzogJ9u3JyxcbiAgICAnOCc6ICfbuCcsXG4gICAgJzknOiAn27knLFxuICAgICcwJzogJ9uwJ1xuICB9XG4gICwgbnVtYmVyTWFwID0ge1xuICAgICfbsSc6ICcxJyxcbiAgICAn27InOiAnMicsXG4gICAgJ9uzJzogJzMnLFxuICAgICfbtCc6ICc0JyxcbiAgICAn27UnOiAnNScsXG4gICAgJ9u2JzogJzYnLFxuICAgICfbtyc6ICc3JyxcbiAgICAn27gnOiAnOCcsXG4gICAgJ9u5JzogJzknLFxuICAgICfbsCc6ICcwJ1xuICB9XG5cblxuICAsIHVuaXRBbGlhc2VzID1cbiAgICB7IGptOiAnam1vbnRoJ1xuICAgICwgam1vbnRoczogJ2ptb250aCdcbiAgICAsIGp5OiAnanllYXInXG4gICAgLCBqeWVhcnM6ICdqeWVhcidcbiAgICB9XG5cbiAgLCBmb3JtYXRGdW5jdGlvbnMgPSB7fVxuXG4gICwgb3JkaW5hbGl6ZVRva2VucyA9ICdEREQgdyBNIEQnLnNwbGl0KCcgJylcbiAgLCBwYWRkZWRUb2tlbnMgPSAnTSBEIHcnLnNwbGl0KCcgJylcblxuICAsIGZvcm1hdFRva2VuRnVuY3Rpb25zID1cbiAgICB7IGpNOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpNb250aCgpICsgMVxuICAgICAgfVxuICAgICwgak1NTTogZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuak1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdClcbiAgICAgIH1cbiAgICAsIGpNTU1NOiBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5qTW9udGhzKHRoaXMsIGZvcm1hdClcbiAgICAgIH1cbiAgICAsIGpEOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpEYXRlKClcbiAgICAgIH1cbiAgICAsIGpEREQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuakRheU9mWWVhcigpXG4gICAgICB9XG4gICAgLCBqdzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qV2VlaygpXG4gICAgICB9XG4gICAgLCBqWVk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLmpZZWFyKCkgJSAxMDAsIDIpXG4gICAgICB9XG4gICAgLCBqWVlZWTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMualllYXIoKSwgNClcbiAgICAgIH1cbiAgICAsIGpZWVlZWTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMualllYXIoKSwgNSlcbiAgICAgIH1cbiAgICAsIGpnZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMualdlZWtZZWFyKCkgJSAxMDAsIDIpXG4gICAgICB9XG4gICAgLCBqZ2dnZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qV2Vla1llYXIoKVxuICAgICAgfVxuICAgICwgamdnZ2dnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy5qV2Vla1llYXIoKSwgNSlcbiAgICAgIH1cbiAgICB9XG5cbmZ1bmN0aW9uIHBhZFRva2VuKGZ1bmMsIGNvdW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwoZnVuYy5jYWxsKHRoaXMsIGEpLCBjb3VudClcbiAgfVxufVxuZnVuY3Rpb24gb3JkaW5hbGl6ZVRva2VuKGZ1bmMsIHBlcmlvZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmNhbGwodGhpcywgYSksIHBlcmlvZClcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgaVxuICB3aGlsZSAob3JkaW5hbGl6ZVRva2Vucy5sZW5ndGgpIHtcbiAgICBpID0gb3JkaW5hbGl6ZVRva2Vucy5wb3AoKVxuICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zWydqJyArIGkgKyAnbyddID0gb3JkaW5hbGl6ZVRva2VuKGZvcm1hdFRva2VuRnVuY3Rpb25zWydqJyArIGldLCBpKVxuICB9XG4gIHdoaWxlIChwYWRkZWRUb2tlbnMubGVuZ3RoKSB7XG4gICAgaSA9IHBhZGRlZFRva2Vucy5wb3AoKVxuICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zWydqJyArIGkgKyBpXSA9IHBhZFRva2VuKGZvcm1hdFRva2VuRnVuY3Rpb25zWydqJyArIGldLCAyKVxuICB9XG4gIGZvcm1hdFRva2VuRnVuY3Rpb25zLmpEREREID0gcGFkVG9rZW4oZm9ybWF0VG9rZW5GdW5jdGlvbnMuakRERCwgMylcbn0oKSlcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIEhlbHBlcnNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgdmFyIGtleVxuICBmb3IgKGtleSBpbiBiKVxuICAgIGlmIChiLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICBhW2tleV0gPSBiW2tleV1cbiAgcmV0dXJuIGFcbn1cblxuZnVuY3Rpb24gbGVmdFplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBvdXRwdXQgPSBudW1iZXIgKyAnJ1xuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aClcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXRcbiAgcmV0dXJuIG91dHB1dFxufVxuXG5mdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nXG59XG5cbi8vIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIpIHtcbi8vICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpXG4vLyAgICAgLCBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpXG4vLyAgICAgLCBkaWZmcyA9IDBcbi8vICAgICAsIGlcbi8vICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKVxuLy8gICAgIGlmICh+fmFycmF5MVtpXSAhPT0gfn5hcnJheTJbaV0pXG4vLyAgICAgICBkaWZmcyArPSAxXG4vLyAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmZcbi8vIH1cblxuZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgaWYgKHVuaXRzKSB7XG4gICAgdmFyIGxvd2VyZWQgPSB1bml0cy50b0xvd2VyQ2FzZSgpXG4gICAgdW5pdHMgPSB1bml0QWxpYXNlc1tsb3dlcmVkXSB8fCBsb3dlcmVkXG4gIH1cbiAgcmV0dXJuIHVuaXRzXG59XG5cbmZ1bmN0aW9uIHNldERhdGUobSwgeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgdmFyIGQgPSBtLl9kXG4gIGlmIChpc05hTih5ZWFyKSkge1xuICAgIG0uX2lzVmFsaWQgPSBmYWxzZVxuICB9XG4gIGlmIChtLl9pc1VUQykge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbmV3LWNhcCovXG4gICAgbS5fZCA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXRlLFxuICAgICAgICBkLmdldFVUQ0hvdXJzKCksIGQuZ2V0VVRDTWludXRlcygpLCBkLmdldFVUQ1NlY29uZHMoKSwgZC5nZXRVVENNaWxsaXNlY29uZHMoKSkpXG4gICAgLyplc2xpbnQtZW5hYmxlIG5ldy1jYXAqL1xuICB9IGVsc2Uge1xuICAgIG0uX2QgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSxcbiAgICAgICAgZC5nZXRIb3VycygpLCBkLmdldE1pbnV0ZXMoKSwgZC5nZXRTZWNvbmRzKCksIGQuZ2V0TWlsbGlzZWNvbmRzKCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gb2JqZWN0Q3JlYXRlKHBhcmVudCkge1xuICBmdW5jdGlvbiBGKCkge31cbiAgRi5wcm90b3R5cGUgPSBwYXJlbnRcbiAgcmV0dXJuIG5ldyBGKClcbn1cblxuZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSB7XG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YpXG4gICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpXG4gIGVsc2UgaWYgKCcnLl9fcHJvdG9fXylcbiAgICByZXR1cm4gb2JqZWN0Ll9fcHJvdG9fX1xuICBlbHNlXG4gICAgcmV0dXJuIG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGVcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIExhbmd1YWdlc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXh0ZW5kKGdldFByb3RvdHlwZU9mKG1vbWVudC5sb2NhbGVEYXRhKCkpLFxuICB7IF9qTW9udGhzOiBbICdGYXJ2YXJkaW4nXG4gICAgICAgICAgICAgICwgJ09yZGliZWhlc2h0J1xuICAgICAgICAgICAgICAsICdLaG9yZGFhZCdcbiAgICAgICAgICAgICAgLCAnVGlyJ1xuICAgICAgICAgICAgICAsICdBbW9yZGFhZCdcbiAgICAgICAgICAgICAgLCAnU2hhaHJpdmFyJ1xuICAgICAgICAgICAgICAsICdNZWhyJ1xuICAgICAgICAgICAgICAsICdBYWJhYW4nXG4gICAgICAgICAgICAgICwgJ0FhemFyJ1xuICAgICAgICAgICAgICAsICdEZXknXG4gICAgICAgICAgICAgICwgJ0JhaG1hbidcbiAgICAgICAgICAgICAgLCAnRXNmYW5kJ1xuICAgICAgICAgICAgICBdXG4gICwgak1vbnRoczogZnVuY3Rpb24gKG0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9qTW9udGhzW20uak1vbnRoKCldXG4gICAgfVxuXG4gICwgX2pNb250aHNTaG9ydDogIFsgJ0ZhcidcbiAgICAgICAgICAgICAgICAgICAgLCAnT3JkJ1xuICAgICAgICAgICAgICAgICAgICAsICdLaG8nXG4gICAgICAgICAgICAgICAgICAgICwgJ1RpcidcbiAgICAgICAgICAgICAgICAgICAgLCAnQW1vJ1xuICAgICAgICAgICAgICAgICAgICAsICdTaGEnXG4gICAgICAgICAgICAgICAgICAgICwgJ01laCdcbiAgICAgICAgICAgICAgICAgICAgLCAnQWFiJ1xuICAgICAgICAgICAgICAgICAgICAsICdBYXonXG4gICAgICAgICAgICAgICAgICAgICwgJ0RleSdcbiAgICAgICAgICAgICAgICAgICAgLCAnQmFoJ1xuICAgICAgICAgICAgICAgICAgICAsICdFc2YnXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgLCBqTW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gdGhpcy5fak1vbnRoc1Nob3J0W20uak1vbnRoKCldXG4gICAgfVxuXG4gICwgak1vbnRoc1BhcnNlOiBmdW5jdGlvbiAobW9udGhOYW1lKSB7XG4gICAgICB2YXIgaVxuICAgICAgICAsIG1vbVxuICAgICAgICAsIHJlZ2V4XG4gICAgICBpZiAoIXRoaXMuX2pNb250aHNQYXJzZSlcbiAgICAgICAgdGhpcy5fak1vbnRoc1BhcnNlID0gW11cbiAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSArPSAxKSB7XG4gICAgICAgIC8vIE1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeS5cbiAgICAgICAgaWYgKCF0aGlzLl9qTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICBtb20gPSBqTW9tZW50KFsyMDAwLCAoMiArIGkpICUgMTIsIDI1XSlcbiAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMuak1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLmpNb250aHNTaG9ydChtb20sICcnKVxuICAgICAgICAgIHRoaXMuX2pNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKVxuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgdGhlIHJlZ2V4LlxuICAgICAgICBpZiAodGhpcy5fak1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSlcbiAgICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cbiAgfVxuKVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgRm9ybWF0dGluZ1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKVxuICAgICwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoXG4gICAgLCBpXG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKVxuICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pXG4gICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXVxuXG4gIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgdmFyIG91dHB1dCA9ICcnXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKVxuICAgICAgb3V0cHV0ICs9IGFycmF5W2ldIGluc3RhbmNlb2YgRnVuY3Rpb24gPyAnWycgKyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSArICddJyA6IGFycmF5W2ldXG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICBQYXJzaW5nXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSB7XG4gIHN3aXRjaCAodG9rZW4pIHtcbiAgY2FzZSAnakREREQnOlxuICAgIHJldHVybiBwYXJzZVRva2VuVGhyZWVEaWdpdHNcbiAgY2FzZSAnallZWVknOlxuICAgIHJldHVybiBwYXJzZVRva2VuRm91ckRpZ2l0c1xuICBjYXNlICdqWVlZWVknOlxuICAgIHJldHVybiBwYXJzZVRva2VuU2l4RGlnaXRzXG4gIGNhc2UgJ2pEREQnOlxuICAgIHJldHVybiBwYXJzZVRva2VuT25lVG9UaHJlZURpZ2l0c1xuICBjYXNlICdqTU1NJzpcbiAgY2FzZSAnak1NTU0nOlxuICAgIHJldHVybiBwYXJzZVRva2VuV29yZFxuICBjYXNlICdqTU0nOlxuICBjYXNlICdqREQnOlxuICBjYXNlICdqWVknOlxuICBjYXNlICdqTSc6XG4gIGNhc2UgJ2pEJzpcbiAgICByZXR1cm4gcGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzXG4gIGNhc2UgJ0REREQnOlxuICAgIHJldHVybiBwYXJzZVRva2VuVGhyZWVEaWdpdHNcbiAgY2FzZSAnWVlZWSc6XG4gICAgcmV0dXJuIHBhcnNlVG9rZW5Gb3VyRGlnaXRzXG4gIGNhc2UgJ1lZWVlZJzpcbiAgICByZXR1cm4gcGFyc2VUb2tlblNpeERpZ2l0c1xuICBjYXNlICdTJzpcbiAgY2FzZSAnU1MnOlxuICBjYXNlICdTU1MnOlxuICBjYXNlICdEREQnOlxuICAgIHJldHVybiBwYXJzZVRva2VuT25lVG9UaHJlZURpZ2l0c1xuICBjYXNlICdNTU0nOlxuICBjYXNlICdNTU1NJzpcbiAgY2FzZSAnZGQnOlxuICBjYXNlICdkZGQnOlxuICBjYXNlICdkZGRkJzpcbiAgICByZXR1cm4gcGFyc2VUb2tlbldvcmRcbiAgY2FzZSAnYSc6XG4gIGNhc2UgJ0EnOlxuICAgIHJldHVybiBtb21lbnQubG9jYWxlRGF0YShjb25maWcuX2wpLl9tZXJpZGllbVBhcnNlXG4gIGNhc2UgJ1gnOlxuICAgIHJldHVybiBwYXJzZVRva2VuVGltZXN0YW1wTXNcbiAgY2FzZSAnWic6XG4gIGNhc2UgJ1paJzpcbiAgICByZXR1cm4gcGFyc2VUb2tlblRpbWV6b25lXG4gIGNhc2UgJ1QnOlxuICAgIHJldHVybiBwYXJzZVRva2VuVFxuICBjYXNlICdNTSc6XG4gIGNhc2UgJ0REJzpcbiAgY2FzZSAnWVknOlxuICBjYXNlICdISCc6XG4gIGNhc2UgJ2hoJzpcbiAgY2FzZSAnbW0nOlxuICBjYXNlICdzcyc6XG4gIGNhc2UgJ00nOlxuICBjYXNlICdEJzpcbiAgY2FzZSAnZCc6XG4gIGNhc2UgJ0gnOlxuICBjYXNlICdoJzpcbiAgY2FzZSAnbSc6XG4gIGNhc2UgJ3MnOlxuICAgIHJldHVybiBwYXJzZVRva2VuT25lT3JUd29EaWdpdHNcbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh0b2tlbi5yZXBsYWNlKCdcXFxcJywgJycpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gIHZhciBhXG4gICAgLCBkYXRlUGFydEFycmF5ID0gY29uZmlnLl9hXG5cbiAgc3dpdGNoICh0b2tlbikge1xuICBjYXNlICdqTSc6XG4gIGNhc2UgJ2pNTSc6XG4gICAgZGF0ZVBhcnRBcnJheVsxXSA9IGlucHV0ID09IG51bGwgPyAwIDogfn5pbnB1dCAtIDFcbiAgICBicmVha1xuICBjYXNlICdqTU1NJzpcbiAgY2FzZSAnak1NTU0nOlxuICAgIGEgPSBtb21lbnQubG9jYWxlRGF0YShjb25maWcuX2wpLmpNb250aHNQYXJzZShpbnB1dClcbiAgICBpZiAoYSAhPSBudWxsKVxuICAgICAgZGF0ZVBhcnRBcnJheVsxXSA9IGFcbiAgICBlbHNlXG4gICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICAgIGJyZWFrXG4gIGNhc2UgJ2pEJzpcbiAgY2FzZSAnakREJzpcbiAgY2FzZSAnakRERCc6XG4gIGNhc2UgJ2pEREREJzpcbiAgICBpZiAoaW5wdXQgIT0gbnVsbClcbiAgICAgIGRhdGVQYXJ0QXJyYXlbMl0gPSB+fmlucHV0XG4gICAgYnJlYWtcbiAgY2FzZSAnallZJzpcbiAgICBkYXRlUGFydEFycmF5WzBdID0gfn5pbnB1dCArICh+fmlucHV0ID4gNDcgPyAxMzAwIDogMTQwMClcbiAgICBicmVha1xuICBjYXNlICdqWVlZWSc6XG4gIGNhc2UgJ2pZWVlZWSc6XG4gICAgZGF0ZVBhcnRBcnJheVswXSA9IH5+aW5wdXRcbiAgfVxuICBpZiAoaW5wdXQgPT0gbnVsbClcbiAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxufVxuXG5mdW5jdGlvbiBkYXRlRnJvbUFycmF5KGNvbmZpZykge1xuICB2YXIgZ1xuICAgICwgalxuICAgICwgankgPSBjb25maWcuX2FbMF1cbiAgICAsIGptID0gY29uZmlnLl9hWzFdXG4gICAgLCBqZCA9IGNvbmZpZy5fYVsyXVxuXG4gIGlmICgoankgPT0gbnVsbCkgJiYgKGptID09IG51bGwpICYmIChqZCA9PSBudWxsKSlcbiAgICByZXR1cm4gWzAsIDAsIDFdXG4gIGp5ID0gankgIT0gbnVsbCA/IGp5IDogMFxuICBqbSA9IGptICE9IG51bGwgPyBqbSA6IDBcbiAgamQgPSBqZCAhPSBudWxsID8gamQgOiAxXG4gIGlmIChqZCA8IDEgfHwgamQgPiBqTW9tZW50LmpEYXlzSW5Nb250aChqeSwgam0pIHx8IGptIDwgMCB8fCBqbSA+IDExKVxuICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gIGcgPSB0b0dyZWdvcmlhbihqeSwgam0sIGpkKVxuICBqID0gdG9KYWxhYWxpKGcuZ3ksIGcuZ20sIGcuZ2QpXG4gIGlmIChpc05hTihnLmd5KSlcbiAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICBjb25maWcuX2pEaWZmID0gMFxuICBpZiAofn5qLmp5ICE9PSBqeSlcbiAgICBjb25maWcuX2pEaWZmICs9IDFcbiAgaWYgKH5+ai5qbSAhPT0gam0pXG4gICAgY29uZmlnLl9qRGlmZiArPSAxXG4gIGlmICh+fmouamQgIT09IGpkKVxuICAgIGNvbmZpZy5fakRpZmYgKz0gMVxuICByZXR1cm4gW2cuZ3ksIGcuZ20sIGcuZ2RdXG59XG5cbmZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgdmFyIHRva2VucyA9IGNvbmZpZy5fZi5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKVxuICAgICwgc3RyaW5nID0gY29uZmlnLl9pICsgJydcbiAgICAsIGxlbiA9IHRva2Vucy5sZW5ndGhcbiAgICAsIGlcbiAgICAsIHRva2VuXG4gICAgLCBwYXJzZWRJbnB1dFxuXG4gIGNvbmZpZy5fYSA9IFtdXG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgdG9rZW4gPSB0b2tlbnNbaV1cbiAgICBwYXJzZWRJbnB1dCA9IChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykuZXhlYyhzdHJpbmcpIHx8IFtdKVswXVxuICAgIGlmIChwYXJzZWRJbnB1dClcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpXG4gICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSlcbiAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKVxuICB9XG4gIGlmIChzdHJpbmcpXG4gICAgY29uZmlnLl9pbCA9IHN0cmluZ1xuICByZXR1cm4gZGF0ZUZyb21BcnJheShjb25maWcpXG59XG5cbmZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZywgdXRjKSB7XG4gIHZhciBsZW4gPSBjb25maWcuX2YubGVuZ3RoXG4gICAgLCBpXG4gICAgLCBmb3JtYXRcbiAgICAsIHRlbXBNb21lbnRcbiAgICAsIGJlc3RNb21lbnRcbiAgICAsIGN1cnJlbnRTY29yZVxuICAgICwgc2NvcmVUb0JlYXRcblxuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIG1ha2VNb21lbnQobmV3IERhdGUoTmFOKSlcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIGZvcm1hdCA9IGNvbmZpZy5fZltpXVxuICAgIGN1cnJlbnRTY29yZSA9IDBcbiAgICB0ZW1wTW9tZW50ID0gbWFrZU1vbWVudChjb25maWcuX2ksIGZvcm1hdCwgY29uZmlnLl9sLCBjb25maWcuX3N0cmljdCwgdXRjKVxuXG4gICAgaWYgKCF0ZW1wTW9tZW50LmlzVmFsaWQoKSkgY29udGludWVcblxuICAgIC8vIGN1cnJlbnRTY29yZSA9IGNvbXBhcmVBcnJheXModGVtcE1vbWVudC5fYSwgdGVtcE1vbWVudC50b0FycmF5KCkpXG4gICAgY3VycmVudFNjb3JlICs9IHRlbXBNb21lbnQuX2pEaWZmXG4gICAgaWYgKHRlbXBNb21lbnQuX2lsKVxuICAgICAgY3VycmVudFNjb3JlICs9IHRlbXBNb21lbnQuX2lsLmxlbmd0aFxuICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZVxuICAgICAgYmVzdE1vbWVudCA9IHRlbXBNb21lbnRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmVzdE1vbWVudFxufVxuXG5mdW5jdGlvbiByZW1vdmVQYXJzZWRUb2tlbnMoY29uZmlnKSB7XG4gIHZhciBzdHJpbmcgPSBjb25maWcuX2kgKyAnJ1xuICAgICwgaW5wdXQgPSAnJ1xuICAgICwgZm9ybWF0ID0gJydcbiAgICAsIGFycmF5ID0gY29uZmlnLl9mLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpXG4gICAgLCBsZW4gPSBhcnJheS5sZW5ndGhcbiAgICAsIGlcbiAgICAsIG1hdGNoXG4gICAgLCBwYXJzZWRcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICBtYXRjaCA9IGFycmF5W2ldXG4gICAgcGFyc2VkID0gKGdldFBhcnNlUmVnZXhGb3JUb2tlbihtYXRjaCwgY29uZmlnKS5leGVjKHN0cmluZykgfHwgW10pWzBdXG4gICAgaWYgKHBhcnNlZClcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWQpICsgcGFyc2VkLmxlbmd0aClcbiAgICBpZiAoIShmb3JtYXRUb2tlbkZ1bmN0aW9uc1ttYXRjaF0gaW5zdGFuY2VvZiBGdW5jdGlvbikpIHtcbiAgICAgIGZvcm1hdCArPSBtYXRjaFxuICAgICAgaWYgKHBhcnNlZClcbiAgICAgICAgaW5wdXQgKz0gcGFyc2VkXG4gICAgfVxuICB9XG4gIGNvbmZpZy5faSA9IGlucHV0XG4gIGNvbmZpZy5fZiA9IGZvcm1hdFxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgV2VlayBvZiBZZWFyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIGpXZWVrT2ZZZWFyKG1vbSwgZmlyc3REYXlPZldlZWssIGZpcnN0RGF5T2ZXZWVrT2ZZZWFyKSB7XG4gIHZhciBlbmQgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIGZpcnN0RGF5T2ZXZWVrXG4gICAgLCBkYXlzVG9EYXlPZldlZWsgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIG1vbS5kYXkoKVxuICAgICwgYWRqdXN0ZWRNb21lbnRcblxuICBpZiAoZGF5c1RvRGF5T2ZXZWVrID4gZW5kKSB7XG4gICAgZGF5c1RvRGF5T2ZXZWVrIC09IDdcbiAgfVxuICBpZiAoZGF5c1RvRGF5T2ZXZWVrIDwgZW5kIC0gNykge1xuICAgIGRheXNUb0RheU9mV2VlayArPSA3XG4gIH1cbiAgYWRqdXN0ZWRNb21lbnQgPSBqTW9tZW50KG1vbSkuYWRkKGRheXNUb0RheU9mV2VlaywgJ2QnKVxuICByZXR1cm4gIHsgd2VlazogTWF0aC5jZWlsKGFkanVzdGVkTW9tZW50LmpEYXlPZlllYXIoKSAvIDcpXG4gICAgICAgICAgLCB5ZWFyOiBhZGp1c3RlZE1vbWVudC5qWWVhcigpXG4gICAgICAgICAgfVxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgVG9wIExldmVsIEZ1bmN0aW9uc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIG1heFRpbWVzdGFtcCA9IDU3NzI0NDMyMTk5OTk5XG5cbmZ1bmN0aW9uIG1ha2VNb21lbnQoaW5wdXQsIGZvcm1hdCwgbGFuZywgc3RyaWN0LCB1dGMpIHtcbiAgaWYgKHR5cGVvZiBsYW5nID09PSAnYm9vbGVhbicpIHtcbiAgICBzdHJpY3QgPSBsYW5nXG4gICAgbGFuZyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKGZvcm1hdCAmJiB0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJylcbiAgICBmb3JtYXQgPSBmaXhGb3JtYXQoZm9ybWF0LCBtb21lbnQpXG5cbiAgdmFyIGNvbmZpZyA9XG4gICAgICB7IF9pOiBpbnB1dFxuICAgICAgLCBfZjogZm9ybWF0XG4gICAgICAsIF9sOiBsYW5nXG4gICAgICAsIF9zdHJpY3Q6IHN0cmljdFxuICAgICAgLCBfaXNVVEM6IHV0Y1xuICAgICAgfVxuICAgICwgZGF0ZVxuICAgICwgbVxuICAgICwgam1cbiAgICAsIG9yaWdJbnB1dCA9IGlucHV0XG4gICAgLCBvcmlnRm9ybWF0ID0gZm9ybWF0XG4gIGlmIChmb3JtYXQpIHtcbiAgICBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICByZXR1cm4gbWFrZURhdGVGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnLCB1dGMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGUgPSBtYWtlRGF0ZUZyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKVxuICAgICAgcmVtb3ZlUGFyc2VkVG9rZW5zKGNvbmZpZylcbiAgICAgIGZvcm1hdCA9ICdZWVlZLU1NLURELScgKyBjb25maWcuX2ZcbiAgICAgIGlucHV0ID0gbGVmdFplcm9GaWxsKGRhdGVbMF0sIDQpICsgJy0nXG4gICAgICAgICAgICArIGxlZnRaZXJvRmlsbChkYXRlWzFdICsgMSwgMikgKyAnLSdcbiAgICAgICAgICAgICsgbGVmdFplcm9GaWxsKGRhdGVbMl0sIDIpICsgJy0nXG4gICAgICAgICAgICArIGNvbmZpZy5faVxuICAgIH1cbiAgfVxuICBpZiAodXRjKVxuICAgIG0gPSBtb21lbnQudXRjKGlucHV0LCBmb3JtYXQsIGxhbmcsIHN0cmljdClcbiAgZWxzZVxuICAgIG0gPSBtb21lbnQoaW5wdXQsIGZvcm1hdCwgbGFuZywgc3RyaWN0KVxuICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSlcbiAgICBtLl9pc1ZhbGlkID0gZmFsc2VcbiAgbS5fakRpZmYgPSBjb25maWcuX2pEaWZmIHx8IDBcbiAgam0gPSBvYmplY3RDcmVhdGUoak1vbWVudC5mbilcbiAgZXh0ZW5kKGptLCBtKVxuICBpZiAoc3RyaWN0ICYmIGZvcm1hdCAmJiBqbS5pc1ZhbGlkKCkpIHtcbiAgICBqbS5faXNWYWxpZCA9IGptLmZvcm1hdChvcmlnRm9ybWF0KSA9PT0gb3JpZ0lucHV0XG4gIH1cbiAgaWYgKG0uX2QuZ2V0VGltZSgpID4gbWF4VGltZXN0YW1wKSB7XG4gICAgam0uX2lzVmFsaWQgPSBmYWxzZVxuICB9XG4gIHJldHVybiBqbVxufVxuXG5mdW5jdGlvbiBqTW9tZW50KGlucHV0LCBmb3JtYXQsIGxhbmcsIHN0cmljdCkge1xuICByZXR1cm4gbWFrZU1vbWVudChpbnB1dCwgZm9ybWF0LCBsYW5nLCBzdHJpY3QsIGZhbHNlKVxufVxuXG5leHRlbmQoak1vbWVudCwgbW9tZW50KVxuak1vbWVudC5mbiA9IG9iamVjdENyZWF0ZShtb21lbnQuZm4pXG5cbmpNb21lbnQudXRjID0gZnVuY3Rpb24gKGlucHV0LCBmb3JtYXQsIGxhbmcsIHN0cmljdCkge1xuICByZXR1cm4gbWFrZU1vbWVudChpbnB1dCwgZm9ybWF0LCBsYW5nLCBzdHJpY3QsIHRydWUpXG59XG5cbmpNb21lbnQudW5peCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICByZXR1cm4gbWFrZU1vbWVudChpbnB1dCAqIDEwMDApXG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICBqTW9tZW50IFByb3RvdHlwZVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBmaXhGb3JtYXQoZm9ybWF0LCBfbW9tZW50KSB7XG4gIHZhciBpID0gNVxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiBfbW9tZW50LmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXRcbiAgfVxuICB3aGlsZSAoaSA+IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgIGkgLT0gMVxuICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZSlcbiAgfVxuICByZXR1cm4gZm9ybWF0XG59XG5cbmpNb21lbnQuZm4uZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuXG4gIGlmIChmb3JtYXQpIHtcbiAgICBmb3JtYXQgPSBmaXhGb3JtYXQoZm9ybWF0LCB0aGlzKVxuXG4gICAgaWYgKCFmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSkge1xuICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KVxuICAgIH1cbiAgICBmb3JtYXQgPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSh0aGlzKVxuICB9XG4gIHJldHVybiBtb21lbnQuZm4uZm9ybWF0LmNhbGwodGhpcywgZm9ybWF0KVxufVxuXG5qTW9tZW50LmZuLmpZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBsYXN0RGF5XG4gICAgLCBqXG4gICAgLCBnXG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgaiA9IHRvSmFsYWFsaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSlcbiAgICBsYXN0RGF5ID0gTWF0aC5taW4oai5qZCwgak1vbWVudC5qRGF5c0luTW9udGgoaW5wdXQsIGouam0pKVxuICAgIGcgPSB0b0dyZWdvcmlhbihpbnB1dCwgai5qbSwgbGFzdERheSlcbiAgICBzZXREYXRlKHRoaXMsIGcuZ3ksIGcuZ20sIGcuZ2QpXG4gICAgbW9tZW50LnVwZGF0ZU9mZnNldCh0aGlzKVxuICAgIHJldHVybiB0aGlzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvSmFsYWFsaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSkuanlcbiAgfVxufVxuXG5qTW9tZW50LmZuLmpNb250aCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgbGFzdERheVxuICAgICwgalxuICAgICwgZ1xuICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbnB1dCA9IHRoaXMubG9jYWxlRGF0YSgpLmpNb250aHNQYXJzZShpbnB1dClcbiAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBqID0gdG9KYWxhYWxpKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKVxuICAgIGxhc3REYXkgPSBNYXRoLm1pbihqLmpkLCBqTW9tZW50LmpEYXlzSW5Nb250aChqLmp5LCBpbnB1dCkpXG4gICAgdGhpcy5qWWVhcihqLmp5ICsgZGl2KGlucHV0LCAxMikpXG4gICAgaW5wdXQgPSBtb2QoaW5wdXQsIDEyKVxuICAgIGlmIChpbnB1dCA8IDApIHtcbiAgICAgIGlucHV0ICs9IDEyXG4gICAgICB0aGlzLmpZZWFyKHRoaXMualllYXIoKSAtIDEpXG4gICAgfVxuICAgIGcgPSB0b0dyZWdvcmlhbih0aGlzLmpZZWFyKCksIGlucHV0LCBsYXN0RGF5KVxuICAgIHNldERhdGUodGhpcywgZy5neSwgZy5nbSwgZy5nZClcbiAgICBtb21lbnQudXBkYXRlT2Zmc2V0KHRoaXMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdG9KYWxhYWxpKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKS5qbVxuICB9XG59XG5cbmpNb21lbnQuZm4uakRhdGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGpcbiAgICAsIGdcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICBqID0gdG9KYWxhYWxpKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKVxuICAgIGcgPSB0b0dyZWdvcmlhbihqLmp5LCBqLmptLCBpbnB1dClcbiAgICBzZXREYXRlKHRoaXMsIGcuZ3ksIGcuZ20sIGcuZ2QpXG4gICAgbW9tZW50LnVwZGF0ZU9mZnNldCh0aGlzKVxuICAgIHJldHVybiB0aGlzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvSmFsYWFsaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSkuamRcbiAgfVxufVxuXG5qTW9tZW50LmZuLmpEYXlPZlllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKGpNb21lbnQodGhpcykuc3RhcnRPZignZGF5JykgLSBqTW9tZW50KHRoaXMpLnN0YXJ0T2YoJ2pZZWFyJykpIC8gODY0ZTUpICsgMVxuICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKGlucHV0IC0gZGF5T2ZZZWFyLCAnZCcpXG59XG5cbmpNb21lbnQuZm4ualdlZWsgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHdlZWsgPSBqV2Vla09mWWVhcih0aGlzLCB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSkud2Vla1xuICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJylcbn1cblxuak1vbWVudC5mbi5qV2Vla1llYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHllYXIgPSBqV2Vla09mWWVhcih0aGlzLCB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSkueWVhclxuICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHllYXIgOiB0aGlzLmFkZChpbnB1dCAtIHllYXIsICd5Jylcbn1cblxuak1vbWVudC5mbi5hZGQgPSBmdW5jdGlvbiAodmFsLCB1bml0cykge1xuICB2YXIgdGVtcFxuICBpZiAodW5pdHMgIT09IG51bGwgJiYgIWlzTmFOKCt1bml0cykpIHtcbiAgICB0ZW1wID0gdmFsXG4gICAgdmFsID0gdW5pdHNcbiAgICB1bml0cyA9IHRlbXBcbiAgfVxuICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICBpZiAodW5pdHMgPT09ICdqeWVhcicpIHtcbiAgICB0aGlzLmpZZWFyKHRoaXMualllYXIoKSArIHZhbClcbiAgfSBlbHNlIGlmICh1bml0cyA9PT0gJ2ptb250aCcpIHtcbiAgICB0aGlzLmpNb250aCh0aGlzLmpNb250aCgpICsgdmFsKVxuICB9IGVsc2Uge1xuICAgIG1vbWVudC5mbi5hZGQuY2FsbCh0aGlzLCB2YWwsIHVuaXRzKVxuICAgIGlmIChpc05hTih0aGlzLmpZZWFyKCkpKSB7XG4gICAgICB0aGlzLl9pc1ZhbGlkID0gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuak1vbWVudC5mbi5zdWJ0cmFjdCA9IGZ1bmN0aW9uICh2YWwsIHVuaXRzKSB7XG4gIHZhciB0ZW1wXG4gIGlmICh1bml0cyAhPT0gbnVsbCAmJiAhaXNOYU4oK3VuaXRzKSkge1xuICAgIHRlbXAgPSB2YWxcbiAgICB2YWwgPSB1bml0c1xuICAgIHVuaXRzID0gdGVtcFxuICB9XG4gIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpXG4gIGlmICh1bml0cyA9PT0gJ2p5ZWFyJykge1xuICAgIHRoaXMualllYXIodGhpcy5qWWVhcigpIC0gdmFsKVxuICB9IGVsc2UgaWYgKHVuaXRzID09PSAnam1vbnRoJykge1xuICAgIHRoaXMuak1vbnRoKHRoaXMuak1vbnRoKCkgLSB2YWwpXG4gIH0gZWxzZSB7XG4gICAgbW9tZW50LmZuLnN1YnRyYWN0LmNhbGwodGhpcywgdmFsLCB1bml0cylcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5qTW9tZW50LmZuLnN0YXJ0T2YgPSBmdW5jdGlvbiAodW5pdHMpIHtcbiAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cylcbiAgaWYgKHVuaXRzID09PSAnanllYXInIHx8IHVuaXRzID09PSAnam1vbnRoJykge1xuICAgIGlmICh1bml0cyA9PT0gJ2p5ZWFyJykge1xuICAgICAgdGhpcy5qTW9udGgoMClcbiAgICB9XG4gICAgdGhpcy5qRGF0ZSgxKVxuICAgIHRoaXMuaG91cnMoMClcbiAgICB0aGlzLm1pbnV0ZXMoMClcbiAgICB0aGlzLnNlY29uZHMoMClcbiAgICB0aGlzLm1pbGxpc2Vjb25kcygwKVxuICAgIHJldHVybiB0aGlzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1vbWVudC5mbi5zdGFydE9mLmNhbGwodGhpcywgdW5pdHMpXG4gIH1cbn1cblxuak1vbWVudC5mbi5lbmRPZiA9IGZ1bmN0aW9uICh1bml0cykge1xuICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGlzZWNvbmQnKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXRzKS5hZGQoMSwgKHVuaXRzID09PSAnaXNvd2VlaycgPyAnd2VlaycgOiB1bml0cykpLnN1YnRyYWN0KDEsICdtcycpXG59XG5cbmpNb21lbnQuZm4uaXNTYW1lID0gZnVuY3Rpb24gKG90aGVyLCB1bml0cykge1xuICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICBpZiAodW5pdHMgPT09ICdqeWVhcicgfHwgdW5pdHMgPT09ICdqbW9udGgnKSB7XG4gICAgcmV0dXJuIG1vbWVudC5mbi5pc1NhbWUuY2FsbCh0aGlzLnN0YXJ0T2YodW5pdHMpLCBvdGhlci5zdGFydE9mKHVuaXRzKSlcbiAgfVxuICByZXR1cm4gbW9tZW50LmZuLmlzU2FtZS5jYWxsKHRoaXMsIG90aGVyLCB1bml0cylcbn1cblxuak1vbWVudC5mbi5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGpNb21lbnQodGhpcylcbn1cblxuak1vbWVudC5mbi5qWWVhcnMgPSBqTW9tZW50LmZuLmpZZWFyXG5qTW9tZW50LmZuLmpNb250aHMgPSBqTW9tZW50LmZuLmpNb250aFxuak1vbWVudC5mbi5qRGF0ZXMgPSBqTW9tZW50LmZuLmpEYXRlXG5qTW9tZW50LmZuLmpXZWVrcyA9IGpNb21lbnQuZm4ualdlZWtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIGpNb21lbnQgU3RhdGljc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5qTW9tZW50LmpEYXlzSW5Nb250aCA9IGZ1bmN0aW9uICh5ZWFyLCBtb250aCkge1xuICB5ZWFyICs9IGRpdihtb250aCwgMTIpXG4gIG1vbnRoID0gbW9kKG1vbnRoLCAxMilcbiAgaWYgKG1vbnRoIDwgMCkge1xuICAgIG1vbnRoICs9IDEyXG4gICAgeWVhciAtPSAxXG4gIH1cbiAgaWYgKG1vbnRoIDwgNikge1xuICAgIHJldHVybiAzMVxuICB9IGVsc2UgaWYgKG1vbnRoIDwgMTEpIHtcbiAgICByZXR1cm4gMzBcbiAgfSBlbHNlIGlmIChqTW9tZW50LmpJc0xlYXBZZWFyKHllYXIpKSB7XG4gICAgcmV0dXJuIDMwXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDI5XG4gIH1cbn1cblxuak1vbWVudC5qSXNMZWFwWWVhciA9IGphbGFhbGkuaXNMZWFwSmFsYWFsaVllYXJcblxuak1vbWVudC5sb2FkUGVyc2lhbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gIHZhciB1c2VQZXJzaWFuRGlnaXRzID0gIGFyZ3MgIT09IHVuZGVmaW5lZCAmJiBhcmdzLmhhc093blByb3BlcnR5KCd1c2VQZXJzaWFuRGlnaXRzJykgPyBhcmdzLnVzZVBlcnNpYW5EaWdpdHMgOiBmYWxzZVxuICB2YXIgZGlhbGVjdCA9ICBhcmdzICE9PSB1bmRlZmluZWQgJiYgYXJncy5oYXNPd25Qcm9wZXJ0eSgnZGlhbGVjdCcpID8gYXJncy5kaWFsZWN0IDogJ3BlcnNpYW4nXG4gIG1vbWVudC5sb2NhbGUoJ2ZhJylcbiAgbW9tZW50LnVwZGF0ZUxvY2FsZSgnZmEnXG4gICwgeyBtb250aHM6ICgn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScpLnNwbGl0KCdfJylcbiAgICAsIG1vbnRoc1Nob3J0OiAoJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnKS5zcGxpdCgnXycpXG4gICAgLCB3ZWVrZGF5czpcbiAgICAgIHtcbiAgICAgICAgJ3BlcnNpYW4nOiAoJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KLYr9uM2YbZh1/YtNmG2KjZhycpLnNwbGl0KCdfJyksXG4gICAgICAgICdwZXJzaWFuLW1vZGVybic6ICgn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycpLnNwbGl0KCdfJylcbiAgICAgIH1bZGlhbGVjdF1cbiAgICAsIHdlZWtkYXlzU2hvcnQ6XG4gICAgICB7XG4gICAgICAgICdwZXJzaWFuJzogKCfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9ii2K/bjNmG2Ydf2LTZhtio2YcnKS5zcGxpdCgnXycpLFxuICAgICAgICAncGVyc2lhbi1tb2Rlcm4nOiAoJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnKS5zcGxpdCgnXycpXG4gICAgICB9W2RpYWxlY3RdXG4gICAgLCB3ZWVrZGF5c01pbjpcbiAgICAgIHtcbiAgICAgICAgJ3BlcnNpYW4nOiAn24xf2K9f2LNf2oZf2b5f2KJf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgICdwZXJzaWFuLW1vZGVybic6ICfbjF/Yr1/Ys1/ahl/Zvl/YrF/YtCcuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgICwgbG9uZ0RhdGVGb3JtYXQ6XG4gICAgICB7IExUOiAnSEg6bW0nXG4gICAgICAsIEw6ICdqWVlZWS9qTU0vakREJ1xuICAgICAgLCBMTDogJ2pEIGpNTU1NIGpZWVlZJ1xuICAgICAgLCBMTEw6ICdqRCBqTU1NTSBqWVlZWSBMVCdcbiAgICAgICwgTExMTDogJ2RkZGTYjCBqRCBqTU1NTSBqWVlZWSBMVCdcbiAgICAgIH1cbiAgICAsIGNhbGVuZGFyOlxuICAgICAgeyBzYW1lRGF5OiAnW9in2YXYsdmI2LIg2LPYp9i52KpdIExUJ1xuICAgICAgLCBuZXh0RGF5OiAnW9mB2LHYr9inINiz2KfYudiqXSBMVCdcbiAgICAgICwgbmV4dFdlZWs6ICdkZGRkIFvYs9in2LnYql0gTFQnXG4gICAgICAsIGxhc3REYXk6ICdb2K/bjNix2YjYsiDYs9in2LnYql0gTFQnXG4gICAgICAsIGxhc3RXZWVrOiAnZGRkZCBb24wg2b7bjNi0INiz2KfYudiqXSBMVCdcbiAgICAgICwgc2FtZUVsc2U6ICdMJ1xuICAgICAgfVxuICAgICwgcmVsYXRpdmVUaW1lOlxuICAgICAgeyBmdXR1cmU6ICfYr9ixICVzJ1xuICAgICAgLCBwYXN0OiAnJXMg2b7bjNi0J1xuICAgICAgLCBzOiAn2obZhtivINir2KfZhtuM2YcnXG4gICAgICAsIG06ICcxINiv2YLbjNmC2YcnXG4gICAgICAsIG1tOiAnJWQg2K/ZgtuM2YLZhydcbiAgICAgICwgaDogJzEg2LPYp9i52KonXG4gICAgICAsIGhoOiAnJWQg2LPYp9i52KonXG4gICAgICAsIGQ6ICcxINix2YjYsidcbiAgICAgICwgZGQ6ICclZCDYsdmI2LInXG4gICAgICAsIE06ICcxINmF2KfZhydcbiAgICAgICwgTU06ICclZCDZhdin2YcnXG4gICAgICAsIHk6ICcxINiz2KfZhCdcbiAgICAgICwgeXk6ICclZCDYs9in2YQnXG4gICAgICB9XG4gICAgLCBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICBpZiAodXNlUGVyc2lhbkRpZ2l0cykge1xuICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9uwLdu5XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdXG4gICAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdcbiAgICB9XG4gICAgLCBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIGlmICh1c2VQZXJzaWFuRGlnaXRzKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXVxuICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgfVxuICAgICwgb3JkaW5hbDogJyVk2YUnXG4gICAgLCB3ZWVrOlxuICAgICAgeyBkb3c6IDYgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICwgZG95OiAxMiAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICB9XG4gICAgLCBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICfZgi7YuCcgOiAn2Kgu2LgnXG4gICAgICB9XG4gICAgLCBqTW9udGhzOlxuICAgICAge1xuICAgICAgICAncGVyc2lhbic6ICgn2YHYsdmI2LHYr9uM2YZf2KfYsdiv24zYqNmH2LTYql/Yrtix2K/Yp9ivX9iq24zYsV/Yp9mF2LHYr9in2K9f2LTZh9ix24zZiNixX9mF2YfYsV/Yotio2KfZhl/Yotiw2LFf2K/bjF/YqNmH2YXZhl/Yp9iz2YHZhtivJykuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3BlcnNpYW4tbW9kZXJuJzogKCfZgdix2YjYsdiv24zZhl/Yp9ix2K/bjNio2YfYtNiqX9iu2LHYr9in2K9f2KrbjNixX9mF2LHYr9in2K9f2LTZh9ix24zZiNixX9mF2YfYsV/Yotio2KfZhl/Yotiw2LFf2K/bjF/YqNmH2YXZhl/Yp9iz2YHZhtivJykuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgICwgak1vbnRoc1Nob3J0OlxuICAgICAge1xuICAgICAgICAncGVyc2lhbic6ICfZgdix2Yhf2KfYsdivX9iu2LHYr1/YqtuM2LFf2KfZhdixX9i02YfYsV/ZhdmH2LFf2KLYqNinX9ii2LDYsV/Yr9uMX9io2YfZhV/Yp9iz2YEnLnNwbGl0KCdfJyksXG4gICAgICAgICdwZXJzaWFuLW1vZGVybic6ICfZgdix2Yhf2KfYsdivX9iu2LHYr1/YqtuM2LFf2YXYsdivX9i02YfYsV/ZhdmH2LFf2KLYqNinX9ii2LDYsV/Yr9uMX9io2YfZhV/Yp9iz2YEnLnNwbGl0KCdfJylcbiAgICAgIH1bZGlhbGVjdF1cbiAgICB9XG4gIClcbn1cblxuXG5qTW9tZW50LmxvYWRQZXJzaWFuX2RhcmkgPSBmdW5jdGlvbiAoYXJncykge1xuICB2YXIgdXNlUGVyc2lhbkRpZ2l0cyA9ICBhcmdzICE9PSB1bmRlZmluZWQgJiYgYXJncy5oYXNPd25Qcm9wZXJ0eSgndXNlUGVyc2lhbkRpZ2l0cycpID8gYXJncy51c2VQZXJzaWFuRGlnaXRzIDogZmFsc2VcbiAgdmFyIGRpYWxlY3QgPSAgYXJncyAhPT0gdW5kZWZpbmVkICYmIGFyZ3MuaGFzT3duUHJvcGVydHkoJ2RpYWxlY3QnKSA/IGFyZ3MuZGlhbGVjdCA6ICdwZXJzaWFuLWRhcmknXG4gIG1vbWVudC5sb2NhbGUoJ2ZhLWFmJylcbiAgbW9tZW50LnVwZGF0ZUxvY2FsZSgnZmEtYWYnXG4gICwgeyBtb250aHM6ICgn2KzZhtmI2LHbjF/Zgdio2LHZiNix24xf2YXYp9ix2oZf2KfZvtix24zZhF/ZhduMX9is2YjZhl/YrNmI2YTYp9uMX9ii2q/Ys9iqX9iz2b7YqtmF2KjYsV/Yp9qp2KrZiNio2LFf2YbZiNmF2KjYsV/Yr9uM2LPZhdio2LEnKS5zcGxpdCgnXycpXG4gICAgLCBtb250aHNTaG9ydDogKCfYrNmG2YjYsduMX9mB2KjYsdmI2LHbjF/Zhdin2LHahl/Yp9m+2LHbjNmEX9mF24xf2KzZiNmGX9is2YjZhNin24xf2KLar9iz2Kpf2LPZvtiq2YXYqNixX9in2qnYqtmI2KjYsV/ZhtmI2YXYqNixX9iv24zYs9mF2KjYsScpLnNwbGl0KCdfJylcbiAgICAsIHdlZWtkYXlzOlxuICAgICAge1xuICAgICAgICAncGVyc2lhbic6ICgn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/Yotiv24zZhtmHX9i02YbYqNmHJykuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3BlcnNpYW4tbW9kZXJuJzogKCfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJykuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgICwgd2Vla2RheXNTaG9ydDpcbiAgICAgIHtcbiAgICAgICAgJ3BlcnNpYW4nOiAoJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KLYr9uM2YbZh1/YtNmG2KjZhycpLnNwbGl0KCdfJyksXG4gICAgICAgICdwZXJzaWFuLW1vZGVybic6ICgn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycpLnNwbGl0KCdfJylcbiAgICAgIH1bZGlhbGVjdF1cbiAgICAsIHdlZWtkYXlzTWluOlxuICAgICAge1xuICAgICAgICAncGVyc2lhbic6ICfbjF/Yr1/Ys1/ahl/Zvl/Yol/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3BlcnNpYW4tbW9kZXJuJzogJ9uMX9ivX9izX9qGX9m+X9isX9i0Jy5zcGxpdCgnXycpXG4gICAgICB9W2RpYWxlY3RdXG4gICAgLCBsb25nRGF0ZUZvcm1hdDpcbiAgICAgIHsgTFQ6ICdISDptbSdcbiAgICAgICwgTDogJ2pZWVlZL2pNTS9qREQnXG4gICAgICAsIExMOiAnakQgak1NTU0gallZWVknXG4gICAgICAsIExMTDogJ2pEIGpNTU1NIGpZWVlZIExUJ1xuICAgICAgLCBMTExMOiAnZGRkZNiMIGpEIGpNTU1NIGpZWVlZIExUJ1xuICAgICAgfVxuICAgICwgY2FsZW5kYXI6XG4gICAgICB7IHNhbWVEYXk6ICdb2KfZhdix2YjYsiDYs9in2LnYql0gTFQnXG4gICAgICAsIG5leHREYXk6ICdb2YHYsdiv2Kcg2LPYp9i52KpdIExUJ1xuICAgICAgLCBuZXh0V2VlazogJ2RkZGQgW9iz2KfYudiqXSBMVCdcbiAgICAgICwgbGFzdERheTogJ1vYr9uM2LHZiNiyINiz2KfYudiqXSBMVCdcbiAgICAgICwgbGFzdFdlZWs6ICdkZGRkIFvbjCDZvtuM2LQg2LPYp9i52KpdIExUJ1xuICAgICAgLCBzYW1lRWxzZTogJ0wnXG4gICAgICB9XG4gICAgLCByZWxhdGl2ZVRpbWU6XG4gICAgICB7IGZ1dHVyZTogJ9iv2LEgJXMnXG4gICAgICAsIHBhc3Q6ICclcyDZvtuM2LQnXG4gICAgICAsIHM6ICfahtmG2K8g2KvYp9mG24zZhydcbiAgICAgICwgbTogJzEg2K/ZgtuM2YLZhydcbiAgICAgICwgbW06ICclZCDYr9mC24zZgtmHJ1xuICAgICAgLCBoOiAnMSDYs9in2LnYqidcbiAgICAgICwgaGg6ICclZCDYs9in2LnYqidcbiAgICAgICwgZDogJzEg2LHZiNiyJ1xuICAgICAgLCBkZDogJyVkINix2YjYsidcbiAgICAgICwgTTogJzEg2YXYp9mHJ1xuICAgICAgLCBNTTogJyVkINmF2KfZhydcbiAgICAgICwgeTogJzEg2LPYp9mEJ1xuICAgICAgLCB5eTogJyVkINiz2KfZhCdcbiAgICAgIH1cbiAgICAsIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIGlmICh1c2VQZXJzaWFuRGlnaXRzKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b27At27ldL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF1cbiAgICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgIH1cbiAgICAsIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgaWYgKHVzZVBlcnNpYW5EaWdpdHMpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdXG4gICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdcbiAgICB9XG4gICAgLCBvcmRpbmFsOiAnJWTZhSdcbiAgICAsIHdlZWs6XG4gICAgICB7IGRvdzogNiAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgLCBkb3k6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgIH1cbiAgICAsIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ9mCLti4JyA6ICfYqC7YuCdcbiAgICAgIH1cbiAgICAsIGpNb250aHM6XG4gICAgICB7XG4gICAgICAgICdwZXJzaWFuLWRhcmknOiAoJ9it2YXZhF/Yq9mI2LFf2KzZiNiy2Kdf2LPYsdi32KfZhl/Yp9iz2K9f2LPZhtio2YTZh1/ZhduM2LLYp9mGX9i52YLYsdioX9mC2YjYs1/YrNiv24xf2K/ZhNmIX9it2YjYqicpLnNwbGl0KCdfJyksXG4gICAgICAgICdwZXJzaWFuLW1vZGVybi1kYXJpJzogKCfYrdmF2YRf2KvZiNixX9is2YjYstinX9iz2LHYt9in2YZf2KfYs9ivX9iz2YbYqNmE2Ydf2YXbjNiy2KfZhl/YudmC2LHYqF/ZgtmI2LNf2KzYr9uMX9iv2YTZiF/YrdmI2KonKS5zcGxpdCgnXycpXG4gICAgICB9W2RpYWxlY3RdXG4gICAgLCBqTW9udGhzU2hvcnQ6XG4gICAgICB7XG4gICAgICAgICdwZXJzaWFuLWRhcmknOiAn2K3ZhdmEX9ir2YjYsV/YrNmI2LLYp1/Ys9ix2Ldf2KfYs9ivX9iz2YbYqF/ZhduM2LJf2LnZgtixX9mC2YjYs1/YrNiv24xf2K/ZhNmIX9it2YjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3BlcnNpYW4tbW9kZXJuLWRhcmknOiAn2K3ZhdmEX9ir2YjYsV/YrNmI2LLYp1/Ys9ix2Ldf2KfYs9ivX9iz2YbYqF/ZhduM2LJf2LnZgtixX9mC2YjYs1/YrNiv24xf2K/ZhNmIX9it2YjYqicuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgIH1cbiAgKVxufVxuXG5qTW9tZW50LmxvYWRQYXNodG8gPSBmdW5jdGlvbiAoYXJncykge1xuICB2YXIgdXNlUGVyc2lhbkRpZ2l0cyA9ICBhcmdzICE9PSB1bmRlZmluZWQgJiYgYXJncy5oYXNPd25Qcm9wZXJ0eSgndXNlUGVyc2lhbkRpZ2l0cycpID8gYXJncy51c2VQZXJzaWFuRGlnaXRzIDogZmFsc2VcbiAgdmFyIGRpYWxlY3QgPSAgYXJncyAhPT0gdW5kZWZpbmVkICYmIGFyZ3MuaGFzT3duUHJvcGVydHkoJ2RpYWxlY3QnKSA/IGFyZ3MuZGlhbGVjdCA6ICdwYXNodG8nXG4gIG1vbWVudC5sb2NhbGUoJ3BzLWFmJylcbiAgbW9tZW50LnVwZGF0ZUxvY2FsZSgncHMtYWYnXG4gICwgeyBtb250aHM6ICgn2KzZhtmI2LHbjF/Zgdio2LHZiNix24xf2YXYp9ix2oZf2KfZvtix24zZhF/ZhduMX9is2YjZhl/YrNmI2YTYp9uMX9ii2q/Ys9iqX9iz2b7YqtmF2KjYsV/Yp9qp2KrZiNio2LFf2YbZiNmF2KjYsV/Yr9uM2LPZhdio2LEnKS5zcGxpdCgnXycpXG4gICAgLCBtb250aHNTaG9ydDogKCfYrNmG2YjYsduMX9mB2KjYsdmI2LHbjF/Zhdin2LHahl/Yp9m+2LHbjNmEX9mF24xf2KzZiNmGX9is2YjZhNin24xf2KLar9iz2Kpf2LPZvtiq2YXYqNixX9in2qnYqtmI2KjYsV/ZhtmI2YXYqNixX9iv24zYs9mF2KjYsScpLnNwbGl0KCdfJylcbiAgICAsIHdlZWtkYXlzOlxuICAgICAge1xuICAgICAgICAncGFzaHRvJzogKCfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9ii2K/bjNmG2Ydf2LTZhtio2YcnKS5zcGxpdCgnXycpLFxuICAgICAgICAncGFzaHRvLW1vZGVybic6ICgn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycpLnNwbGl0KCdfJylcbiAgICAgIH1bZGlhbGVjdF1cbiAgICAsIHdlZWtkYXlzU2hvcnQ6XG4gICAgICB7XG4gICAgICAgICdwYXNodG8nOiAoJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KLYr9uM2YbZh1/YtNmG2KjZhycpLnNwbGl0KCdfJyksXG4gICAgICAgICdwYXNodG8tbW9kZXJuJzogKCfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJykuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgICwgd2Vla2RheXNNaW46XG4gICAgICB7XG4gICAgICAgICdwYXNodG8nOiAn24xf2K9f2LNf2oZf2b5f2KJf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgICdwYXNodG8tbW9kZXJuJzogJ9uMX9ivX9izX9qGX9m+X9isX9i0Jy5zcGxpdCgnXycpXG4gICAgICB9W2RpYWxlY3RdXG4gICAgLCBsb25nRGF0ZUZvcm1hdDpcbiAgICAgIHsgTFQ6ICdISDptbSdcbiAgICAgICwgTDogJ2pZWVlZL2pNTS9qREQnXG4gICAgICAsIExMOiAnakQgak1NTU0gallZWVknXG4gICAgICAsIExMTDogJ2pEIGpNTU1NIGpZWVlZIExUJ1xuICAgICAgLCBMTExMOiAnZGRkZNiMIGpEIGpNTU1NIGpZWVlZIExUJ1xuICAgICAgfVxuICAgICwgY2FsZW5kYXI6XG4gICAgICB7IHNhbWVEYXk6ICdb2KfZhdix2YjYsiDYs9in2LnYql0gTFQnXG4gICAgICAsIG5leHREYXk6ICdb2YHYsdiv2Kcg2LPYp9i52KpdIExUJ1xuICAgICAgLCBuZXh0V2VlazogJ2RkZGQgW9iz2KfYudiqXSBMVCdcbiAgICAgICwgbGFzdERheTogJ1vYr9uM2LHZiNiyINiz2KfYudiqXSBMVCdcbiAgICAgICwgbGFzdFdlZWs6ICdkZGRkIFvbjCDZvtuM2LQg2LPYp9i52KpdIExUJ1xuICAgICAgLCBzYW1lRWxzZTogJ0wnXG4gICAgICB9XG4gICAgLCByZWxhdGl2ZVRpbWU6XG4gICAgICB7IGZ1dHVyZTogJ9iv2LEgJXMnXG4gICAgICAsIHBhc3Q6ICclcyDZvtuM2LQnXG4gICAgICAsIHM6ICfahtmG2K8g2KvYp9mG24zZhydcbiAgICAgICwgbTogJzEg2K/ZgtuM2YLZhydcbiAgICAgICwgbW06ICclZCDYr9mC24zZgtmHJ1xuICAgICAgLCBoOiAnMSDYs9in2LnYqidcbiAgICAgICwgaGg6ICclZCDYs9in2LnYqidcbiAgICAgICwgZDogJzEg2LHZiNiyJ1xuICAgICAgLCBkZDogJyVkINix2YjYsidcbiAgICAgICwgTTogJzEg2YXYp9mHJ1xuICAgICAgLCBNTTogJyVkINmF2KfZhydcbiAgICAgICwgeTogJzEg2LPYp9mEJ1xuICAgICAgLCB5eTogJyVkINiz2KfZhCdcbiAgICAgIH1cbiAgICAsIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIGlmICh1c2VQZXJzaWFuRGlnaXRzKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b27At27ldL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF1cbiAgICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgIH1cbiAgICAsIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgaWYgKHVzZVBlcnNpYW5EaWdpdHMpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdXG4gICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdcbiAgICB9XG4gICAgLCBvcmRpbmFsOiAnJWTZhSdcbiAgICAsIHdlZWs6XG4gICAgICB7IGRvdzogNiAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgLCBkb3k6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgIH1cbiAgICAsIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ9mCLti4JyA6ICfYqC7YuCdcbiAgICAgIH1cbiAgICAsIGpNb250aHM6XG4gICAgICB7XG4gICAgICAgICdwYXNodG8nOiAoJ9mI2LHbjF/YutmI24zbjF/Yutio2LHaq9mI2YTbjF/ahtmG2qvYp9qaX9iy2YXYsduMX9mI2pbbjF/YqtmE2Ydf2YTak9mFX9mE24zZhtiv24xf2YXYsdi62YjZhduMX9iz2YTZiNin2LrZh1/aqdioJykuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3Bhc2h0by1tb2Rlcm4nOiAoJ9mI2LHbjF/YutmI24zbjF/Yutio2LHaq9mI2YTbjF/ahtmG2qvYp9qaX9iy2YXYsduMX9mI2pbbjF/YqtmE2Ydf2YTak9mFX9mE24zZhtiv24xf2YXYsdi62YjZhduMX9iz2YTZiNin2LrZh1/aqdioJykuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgICwgak1vbnRoc1Nob3J0OlxuICAgICAge1xuICAgICAgICAncGFzaHRvJzogJ9mI2LHbjF/YutmI24xf2LrYqNixX9qG2Ybaq1/YstmF2LFf2YjaltuMX9mE2pPZhV/ZhNuM2YZf2YXYsdi6X9iz2YTZiF/aqdioJy5zcGxpdCgnXycpLFxuICAgICAgICAncGFzaHRvLW1vZGVybic6ICfZiNix24xf2LrZiNuMX9i62KjYsV/ahtmG2qtf2LLZhdixX9mI2pbbjF/ZhNqT2YVf2YTbjNmGX9mF2LHYul/Ys9mE2Yhf2qnYqCcuc3BsaXQoJ18nKVxuICAgICAgfVtkaWFsZWN0XVxuICAgIH1cbiAgKVxufVxuXG5qTW9tZW50LmpDb252ZXJ0ID0gIHsgdG9KYWxhYWxpOiB0b0phbGFhbGlcbiAgICAgICAgICAgICAgICAgICAgLCB0b0dyZWdvcmlhbjogdG9HcmVnb3JpYW5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgSmFsYWFsaSBDb252ZXJzaW9uXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIHRvSmFsYWFsaShneSwgZ20sIGdkKSB7XG4gIHRyeSB7XG4gICAgdmFyIGogPSBqYWxhYWxpLnRvSmFsYWFsaShneSwgZ20gKyAxLCBnZClcbiAgICBqLmptIC09IDFcbiAgICByZXR1cm4galxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGp5OiBOYU5cbiAgICAgICwgam06IE5hTlxuICAgICAgLCBqZDogTmFOXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvR3JlZ29yaWFuKGp5LCBqbSwgamQpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZyA9IGphbGFhbGkudG9HcmVnb3JpYW4oanksIGptICsgMSwgamQpXG4gICAgZy5nbSAtPSAxXG4gICAgcmV0dXJuIGdcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7XG4gICAgICBneTogTmFOXG4gICAgICAsIGdtOiBOYU5cbiAgICAgICwgZ2Q6IE5hTlxuICAgIH1cbiAgfVxufVxuXG4vKlxuICBVdGlsaXR5IGhlbHBlciBmdW5jdGlvbnMuXG4qL1xuXG5mdW5jdGlvbiBkaXYoYSwgYikge1xuICByZXR1cm4gfn4oYSAvIGIpXG59XG5cbmZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gIHJldHVybiBhIC0gfn4oYSAvIGIpICogYlxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqTW9tZW50IiwibW9tZW50IiwicmVxdWlyZSIsImphbGFhbGkiLCJmb3JtYXR0aW5nVG9rZW5zIiwibG9jYWxGb3JtYXR0aW5nVG9rZW5zIiwicGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzIiwicGFyc2VUb2tlbk9uZVRvVGhyZWVEaWdpdHMiLCJwYXJzZVRva2VuVGhyZWVEaWdpdHMiLCJwYXJzZVRva2VuRm91ckRpZ2l0cyIsInBhcnNlVG9rZW5TaXhEaWdpdHMiLCJwYXJzZVRva2VuV29yZCIsInBhcnNlVG9rZW5UaW1lem9uZSIsInBhcnNlVG9rZW5UIiwicGFyc2VUb2tlblRpbWVzdGFtcE1zIiwic3ltYm9sTWFwIiwibnVtYmVyTWFwIiwidW5pdEFsaWFzZXMiLCJqbSIsImptb250aHMiLCJqeSIsImp5ZWFycyIsImZvcm1hdEZ1bmN0aW9ucyIsIm9yZGluYWxpemVUb2tlbnMiLCJzcGxpdCIsInBhZGRlZFRva2VucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiak0iLCJqTW9udGgiLCJqTU1NIiwiZm9ybWF0IiwibG9jYWxlRGF0YSIsImpNb250aHNTaG9ydCIsImpNTU1NIiwiak1vbnRocyIsImpEIiwiakRhdGUiLCJqREREIiwiakRheU9mWWVhciIsImp3IiwialdlZWsiLCJqWVkiLCJsZWZ0WmVyb0ZpbGwiLCJqWWVhciIsImpZWVlZIiwiallZWVlZIiwiamdnIiwialdlZWtZZWFyIiwiamdnZ2ciLCJqZ2dnZ2ciLCJwYWRUb2tlbiIsImZ1bmMiLCJjb3VudCIsImEiLCJjYWxsIiwib3JkaW5hbGl6ZVRva2VuIiwicGVyaW9kIiwib3JkaW5hbCIsImkiLCJsZW5ndGgiLCJwb3AiLCJqRERERCIsImV4dGVuZCIsImIiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm51bWJlciIsInRhcmdldExlbmd0aCIsIm91dHB1dCIsImlzQXJyYXkiLCJpbnB1dCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsImxvd2VyZWQiLCJ0b0xvd2VyQ2FzZSIsInNldERhdGUiLCJtIiwieWVhciIsIm1vbnRoIiwiZGF0ZSIsImQiLCJfZCIsImlzTmFOIiwiX2lzVmFsaWQiLCJfaXNVVEMiLCJEYXRlIiwiVVRDIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJvYmplY3RDcmVhdGUiLCJwYXJlbnQiLCJGIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3QiLCJfX3Byb3RvX18iLCJjb25zdHJ1Y3RvciIsIl9qTW9udGhzIiwiX2pNb250aHNTaG9ydCIsImpNb250aHNQYXJzZSIsIm1vbnRoTmFtZSIsIm1vbSIsInJlZ2V4IiwiX2pNb250aHNQYXJzZSIsIlJlZ0V4cCIsInJlcGxhY2UiLCJ0ZXN0IiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiYXJyYXkiLCJtYXRjaCIsIkZ1bmN0aW9uIiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwidG9rZW4iLCJjb25maWciLCJfbCIsIl9tZXJpZGllbVBhcnNlIiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJkYXRlUGFydEFycmF5IiwiX2EiLCJkYXRlRnJvbUFycmF5IiwiZyIsImoiLCJqZCIsImpEYXlzSW5Nb250aCIsInRvR3JlZ29yaWFuIiwidG9KYWxhYWxpIiwiZ3kiLCJnbSIsImdkIiwiX2pEaWZmIiwibWFrZURhdGVGcm9tU3RyaW5nQW5kRm9ybWF0IiwidG9rZW5zIiwiX2YiLCJzdHJpbmciLCJfaSIsImxlbiIsInBhcnNlZElucHV0IiwiZXhlYyIsInNsaWNlIiwiaW5kZXhPZiIsIl9pbCIsIm1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5IiwidXRjIiwidGVtcE1vbWVudCIsImJlc3RNb21lbnQiLCJjdXJyZW50U2NvcmUiLCJzY29yZVRvQmVhdCIsIm1ha2VNb21lbnQiLCJOYU4iLCJfc3RyaWN0IiwiaXNWYWxpZCIsInJlbW92ZVBhcnNlZFRva2VucyIsInBhcnNlZCIsImpXZWVrT2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJmaXJzdERheU9mV2Vla09mWWVhciIsImVuZCIsImRheXNUb0RheU9mV2VlayIsImRheSIsImFkanVzdGVkTW9tZW50IiwiYWRkIiwid2VlayIsIk1hdGgiLCJjZWlsIiwibWF4VGltZXN0YW1wIiwibGFuZyIsInN0cmljdCIsInVuZGVmaW5lZCIsImZpeEZvcm1hdCIsIm9yaWdJbnB1dCIsIm9yaWdGb3JtYXQiLCJmbiIsImdldFRpbWUiLCJ1bml4IiwiX21vbWVudCIsImxvbmdEYXRlRm9ybWF0IiwibGFzdERheSIsIm1pbiIsInVwZGF0ZU9mZnNldCIsImRpdiIsIm1vZCIsImRheU9mWWVhciIsInJvdW5kIiwic3RhcnRPZiIsIl93ZWVrIiwiZG93IiwiZG95IiwidmFsIiwidGVtcCIsInN1YnRyYWN0IiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImVuZE9mIiwiaXNTYW1lIiwib3RoZXIiLCJjbG9uZSIsImpZZWFycyIsImpEYXRlcyIsImpXZWVrcyIsImpJc0xlYXBZZWFyIiwiaXNMZWFwSmFsYWFsaVllYXIiLCJsb2FkUGVyc2lhbiIsImFyZ3MiLCJ1c2VQZXJzaWFuRGlnaXRzIiwiZGlhbGVjdCIsImxvY2FsZSIsInVwZGF0ZUxvY2FsZSIsIm1vbnRocyIsIm1vbnRoc1Nob3J0Iiwid2Vla2RheXMiLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXNNaW4iLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJjYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwicmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInMiLCJtbSIsImgiLCJoaCIsImRkIiwiTSIsIk1NIiwieSIsInl5IiwicHJlcGFyc2UiLCJwb3N0Zm9ybWF0IiwibWVyaWRpZW0iLCJob3VyIiwibG9hZFBlcnNpYW5fZGFyaSIsImxvYWRQYXNodG8iLCJqQ29udmVydCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/moment-jalaali/index.js\n");

/***/ })

};
;